/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const DAOS_API_VERSION_MAJOR: u32 = 2;
pub const DAOS_API_VERSION_MINOR: u32 = 7;
pub const DAOS_API_VERSION_FIX: u32 = 0;
pub const DAOS_VERSION_MAJOR: u32 = 2;
pub const DAOS_VERSION_MINOR: u32 = 4;
pub const DAOS_VERSION_FIX: u32 = 2;
pub const DER_SUCCESS: u32 = 0;
pub const DF_RC: &[u8; 13] = b"%s(%d): '%s'\0";
pub const DAOS_SYS_NAME_MAX: u32 = 15;
pub const DAOS_SYS_INFO_STRING_MAX: u32 = 63;
pub const DAOS_HKEY_MAX: u32 = 32;
pub const DAOS_ANCHOR_BUF_MAX: u32 = 104;
pub const DAOS_PC_RO: u32 = 1;
pub const DAOS_PC_RW: u32 = 2;
pub const DAOS_PC_EX: u32 = 4;
pub const DAOS_PC_NBITS: u32 = 3;
pub const DAOS_PC_MASK: u32 = 7;
pub const DAOS_EPOCH_MAX: i32 = -1;
pub const DAOS_EQ_WAIT: i32 = -1;
pub const DAOS_EQ_NOWAIT: u32 = 0;
pub const DAOS_ATTR_NAME_MAX: u32 = 511;
pub const DAOS_EQ_DESTROY_FORCE: u32 = 1;
pub const MAX_OBJ_CLASS_NAME_LEN: u32 = 24;
pub const MAX_NUM_GROUPS: u32 = 65535;
pub const OC_REDUN_SHIFT: u32 = 24;
pub const DAOS_PROP_PO_EC_CELL_SZ_MIN: u32 = 1024;
pub const DAOS_PROP_PO_EC_CELL_SZ_MAX: u32 = 1073741824;
pub const DAOS_PROP_PO_REDUN_FAC_MAX: u32 = 4;
pub const DAOS_PROP_PO_REDUN_FAC_DEFAULT: u32 = 0;
pub const DAOS_PROP_PO_RP_PDA_DEFAULT: u32 = 3;
pub const DAOS_PROP_PO_EC_PDA_DEFAULT: u32 = 1;
pub const DAOS_PROP_PO_SVC_REDUN_FAC_MAX: u32 = 4;
pub const DAOS_PROP_PO_SVC_REDUN_FAC_DEFAULT: u32 = 2;
pub const DAOS_PROP_PO_SCRUB_FREQ_DEFAULT: u32 = 604800;
pub const DAOS_PROP_PO_SCRUB_THRESH_DEFAULT: u32 = 0;
pub const DAOS_PROP_PO_CHECKPOINT_FREQ_DEFAULT: u32 = 5;
pub const DAOS_PROP_PO_CHECKPOINT_FREQ_MIN: u32 = 1;
pub const DAOS_PROP_PO_CHECKPOINT_FREQ_MAX: u32 = 1048576;
pub const DAOS_PROP_PO_CHECKPOINT_THRESH_DEFAULT: u32 = 50;
pub const DAOS_PROP_PO_CHECKPOINT_THRESH_MAX: u32 = 75;
pub const DAOS_PROP_PO_CHECKPOINT_THRESH_MIN: u32 = 10;
pub const DAOS_SELF_HEAL_AUTO_EXCLUDE: u32 = 1;
pub const DAOS_SELF_HEAL_AUTO_REBUILD: u32 = 2;
pub const DAOS_PROP_CO_CLEAR: u32 = 1;
pub const DAOS_PROP_ENTRIES_MAX_NR: u32 = 128;
pub const DAOS_PROP_LABEL_MAX_LEN: u32 = 127;
pub const DAOS_PROP_MAX_LABEL_BUF_LEN: u32 = 128;
pub const DAOS_PROP_CO_LABEL_DEFAULT: &[u8; 24] = b"container_label_not_set\0";
pub const DAOS_PROP_PO_LABEL_DEFAULT: &[u8; 19] = b"pool_label_not_set\0";
pub const DAOS_PROP_POLICYSTR_MAX_LEN: u32 = 127;
pub const DAOS_PROP_POLICYSTR_DEFAULT: &[u8; 13] = b"type=io_size\0";
pub const OID_FMT_INTR_BITS: u32 = 32;
pub const OID_FMT_TYPE_BITS: u32 = 8;
pub const OID_FMT_CLASS_BITS: u32 = 8;
pub const OID_FMT_META_BITS: u32 = 16;
pub const OID_FMT_TYPE_SHIFT: u32 = 56;
pub const OID_FMT_CLASS_SHIFT: u32 = 48;
pub const OID_FMT_META_SHIFT: u32 = 32;
pub const OID_FMT_TYPE_MAX: u32 = 255;
pub const OID_FMT_CLASS_MAX: u32 = 255;
pub const OID_FMT_META_MAX: u32 = 65535;
pub const OID_FMT_TYPE_MASK: i64 = -72057594037927936;
pub const OID_FMT_CLASS_MASK: u64 = 71776119061217280;
pub const OID_FMT_META_MASK: u64 = 281470681743360;
pub const IO_FLAGS_COND_BITS: u32 = 8;
pub const DAOS_IOMF_DETAIL: u32 = 1;
pub const DAOS_OCH_RDD_BITS: u32 = 4;
pub const DAOS_OCH_SHD_BITS: u32 = 6;
pub const DAOS_OCH_RDD_SHIFT: u32 = 0;
pub const DAOS_OCH_SHD_SHIFT: u32 = 4;
pub const DAOS_OCH_RDD_MAX_VAL: u32 = 15;
pub const DAOS_OCH_SHD_MAX_VAL: u32 = 63;
pub const DAOS_OCH_RDD_MASK: u32 = 15;
pub const DAOS_OCH_SHD_MASK: u32 = 1008;
pub const DAOS_OIT_MARKER_MAX_LEN: u32 = 32;
pub const DAOS_ACL_VERSION: u32 = 1;
pub const DAOS_ACL_MAX_PRINCIPAL_LEN: u32 = 255;
pub const DAOS_ACL_MAX_PRINCIPAL_BUF_LEN: u32 = 256;
pub const DAOS_ACL_PRINCIPAL_OWNER: &[u8; 7] = b"OWNER@\0";
pub const DAOS_ACL_PRINCIPAL_OWNER_GRP: &[u8; 7] = b"GROUP@\0";
pub const DAOS_ACL_PRINCIPAL_EVERYONE: &[u8; 10] = b"EVERYONE@\0";
pub const DAOS_ACL_MAX_ACE_LEN: u32 = 65536;
pub const DAOS_ACL_MAX_ACE_STR_LEN: u32 = 319;
pub const DAOS_COO_RO: u32 = 1;
pub const DAOS_COO_RW: u32 = 2;
pub const DAOS_COO_EX: u32 = 4;
pub const DAOS_COO_FORCE: u32 = 8;
pub const DAOS_COO_RO_MDSTATS: u32 = 16;
pub const DAOS_COO_EVICT: u32 = 32;
pub const DAOS_COO_EVICT_ALL: u32 = 64;
pub const DAOS_COO_NBITS: u32 = 7;
pub const DAOS_COO_MASK: u32 = 127;
pub const DAOS_CONT_HINT_MAX_LEN: u32 = 128;
pub const DAOS_SNAPSHOT_MAX_LEN: u32 = 128;
pub const DAOS_SYS_NAME_MAX_LEN: u32 = 127;
pub const DAOS_POOL_CONT_FILTER_MAX_NPARTS: u32 = 8;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __time_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type gid_t = __gid_t;
pub type uid_t = __uid_t;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type uuid_t = [::std::os::raw::c_uchar; 16usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct d_iov_t {
    pub iov_buf: *mut ::std::os::raw::c_void,
    pub iov_buf_len: usize,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_d_iov_t() {
    const UNINIT: ::std::mem::MaybeUninit<d_iov_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<d_iov_t>(),
        24usize,
        concat!("Size of: ", stringify!(d_iov_t))
    );
    assert_eq!(
        ::std::mem::align_of::<d_iov_t>(),
        8usize,
        concat!("Alignment of ", stringify!(d_iov_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iov_buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(d_iov_t),
            "::",
            stringify!(iov_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iov_buf_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(d_iov_t),
            "::",
            stringify!(iov_buf_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iov_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(d_iov_t),
            "::",
            stringify!(iov_len)
        )
    );
}
pub type d_rank_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct d_rank_list_t {
    pub rl_ranks: *mut d_rank_t,
    pub rl_nr: u32,
}
#[test]
fn bindgen_test_layout_d_rank_list_t() {
    const UNINIT: ::std::mem::MaybeUninit<d_rank_list_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<d_rank_list_t>(),
        16usize,
        concat!("Size of: ", stringify!(d_rank_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<d_rank_list_t>(),
        8usize,
        concat!("Alignment of ", stringify!(d_rank_list_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rl_ranks) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(d_rank_list_t),
            "::",
            stringify!(rl_ranks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rl_nr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(d_rank_list_t),
            "::",
            stringify!(rl_nr)
        )
    );
}
pub type d_string_t = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct d_sg_list_t {
    pub sg_nr: u32,
    pub sg_nr_out: u32,
    pub sg_iovs: *mut d_iov_t,
}
#[test]
fn bindgen_test_layout_d_sg_list_t() {
    const UNINIT: ::std::mem::MaybeUninit<d_sg_list_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<d_sg_list_t>(),
        16usize,
        concat!("Size of: ", stringify!(d_sg_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<d_sg_list_t>(),
        8usize,
        concat!("Alignment of ", stringify!(d_sg_list_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sg_nr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(d_sg_list_t),
            "::",
            stringify!(sg_nr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sg_nr_out) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(d_sg_list_t),
            "::",
            stringify!(sg_nr_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sg_iovs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(d_sg_list_t),
            "::",
            stringify!(sg_iovs)
        )
    );
}
pub const DER_ERR_GURT_BASE: _bindgen_ty_15 = 1000;
pub const DER_NO_PERM: _bindgen_ty_15 = 1001;
pub const DER_NO_HDL: _bindgen_ty_15 = 1002;
pub const DER_INVAL: _bindgen_ty_15 = 1003;
pub const DER_EXIST: _bindgen_ty_15 = 1004;
pub const DER_NONEXIST: _bindgen_ty_15 = 1005;
pub const DER_UNREACH: _bindgen_ty_15 = 1006;
pub const DER_NOSPACE: _bindgen_ty_15 = 1007;
pub const DER_ALREADY: _bindgen_ty_15 = 1008;
pub const DER_NOMEM: _bindgen_ty_15 = 1009;
pub const DER_NOSYS: _bindgen_ty_15 = 1010;
pub const DER_TIMEDOUT: _bindgen_ty_15 = 1011;
pub const DER_BUSY: _bindgen_ty_15 = 1012;
pub const DER_AGAIN: _bindgen_ty_15 = 1013;
pub const DER_PROTO: _bindgen_ty_15 = 1014;
pub const DER_UNINIT: _bindgen_ty_15 = 1015;
pub const DER_TRUNC: _bindgen_ty_15 = 1016;
pub const DER_OVERFLOW: _bindgen_ty_15 = 1017;
pub const DER_CANCELED: _bindgen_ty_15 = 1018;
pub const DER_OOG: _bindgen_ty_15 = 1019;
pub const DER_HG: _bindgen_ty_15 = 1020;
pub const DER_UNREG: _bindgen_ty_15 = 1021;
pub const DER_ADDRSTR_GEN: _bindgen_ty_15 = 1022;
pub const DER_PMIX: _bindgen_ty_15 = 1023;
pub const DER_IVCB_FORWARD: _bindgen_ty_15 = 1024;
pub const DER_MISC: _bindgen_ty_15 = 1025;
pub const DER_BADPATH: _bindgen_ty_15 = 1026;
pub const DER_NOTDIR: _bindgen_ty_15 = 1027;
pub const DER_CORPC_INCOMPLETE: _bindgen_ty_15 = 1028;
pub const DER_NO_RAS_RANK: _bindgen_ty_15 = 1029;
pub const DER_NOTATTACH: _bindgen_ty_15 = 1030;
pub const DER_MISMATCH: _bindgen_ty_15 = 1031;
pub const DER_EXCLUDED: _bindgen_ty_15 = 1032;
pub const DER_NOREPLY: _bindgen_ty_15 = 1033;
pub const DER_DOS: _bindgen_ty_15 = 1034;
pub const DER_BAD_TARGET: _bindgen_ty_15 = 1035;
pub const DER_GRPVER: _bindgen_ty_15 = 1036;
pub const DER_HLC_SYNC: _bindgen_ty_15 = 1037;
pub const DER_NO_SHMEM: _bindgen_ty_15 = 1038;
pub const DER_ADD_METRIC_FAILED: _bindgen_ty_15 = 1039;
pub const DER_DURATION_MISMATCH: _bindgen_ty_15 = 1040;
pub const DER_OP_NOT_PERMITTED: _bindgen_ty_15 = 1041;
pub const DER_EXCEEDS_PATH_LEN: _bindgen_ty_15 = 1042;
pub const DER_METRIC_NOT_FOUND: _bindgen_ty_15 = 1043;
pub const DER_SHMEM_PERMS: _bindgen_ty_15 = 1044;
pub const DER_HG_FATAL: _bindgen_ty_15 = 1045;
pub const DER_ERR_GURT_LIMIT: _bindgen_ty_15 = 1046;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
pub const DER_ERR_DAOS_BASE: _bindgen_ty_16 = 2000;
pub const DER_IO: _bindgen_ty_16 = 2001;
pub const DER_FREE_MEM: _bindgen_ty_16 = 2002;
pub const DER_ENOENT: _bindgen_ty_16 = 2003;
pub const DER_NOTYPE: _bindgen_ty_16 = 2004;
pub const DER_NOSCHEMA: _bindgen_ty_16 = 2005;
pub const DER_NOLOCAL: _bindgen_ty_16 = 2006;
pub const DER_STALE: _bindgen_ty_16 = 2007;
pub const DER_NOTLEADER: _bindgen_ty_16 = 2008;
pub const DER_TGT_CREATE: _bindgen_ty_16 = 2009;
pub const DER_EP_RO: _bindgen_ty_16 = 2010;
pub const DER_EP_OLD: _bindgen_ty_16 = 2011;
pub const DER_KEY2BIG: _bindgen_ty_16 = 2012;
pub const DER_REC2BIG: _bindgen_ty_16 = 2013;
pub const DER_IO_INVAL: _bindgen_ty_16 = 2014;
pub const DER_EQ_BUSY: _bindgen_ty_16 = 2015;
pub const DER_DOMAIN: _bindgen_ty_16 = 2016;
pub const DER_SHUTDOWN: _bindgen_ty_16 = 2017;
pub const DER_INPROGRESS: _bindgen_ty_16 = 2018;
pub const DER_NOTAPPLICABLE: _bindgen_ty_16 = 2019;
pub const DER_NOTREPLICA: _bindgen_ty_16 = 2020;
pub const DER_CSUM: _bindgen_ty_16 = 2021;
pub const DER_DF_INVAL: _bindgen_ty_16 = 2022;
pub const DER_DF_INCOMPT: _bindgen_ty_16 = 2023;
pub const DER_REC_SIZE: _bindgen_ty_16 = 2024;
pub const DER_TX_RESTART: _bindgen_ty_16 = 2025;
pub const DER_DATA_LOSS: _bindgen_ty_16 = 2026;
pub const DER_OP_CANCELED: _bindgen_ty_16 = 2027;
pub const DER_TX_BUSY: _bindgen_ty_16 = 2028;
pub const DER_AGENT_INCOMPAT: _bindgen_ty_16 = 2029;
pub const DER_NEED_TX: _bindgen_ty_16 = 2030;
pub const DER_RF: _bindgen_ty_16 = 2031;
pub const DER_FETCH_AGAIN: _bindgen_ty_16 = 2032;
pub const DER_TX_UNCERTAIN: _bindgen_ty_16 = 2033;
pub const DER_AGENT_COMM: _bindgen_ty_16 = 2034;
pub const DER_ID_MISMATCH: _bindgen_ty_16 = 2035;
pub const DER_TGT_RETRY: _bindgen_ty_16 = 2036;
pub const DER_NOTSUPPORTED: _bindgen_ty_16 = 2037;
pub const DER_CONTROL_INCOMPAT: _bindgen_ty_16 = 2038;
pub const DER_NO_SERVICE: _bindgen_ty_16 = 2039;
pub const DER_TX_ID_REUSED: _bindgen_ty_16 = 2040;
pub const DER_UPDATE_AGAIN: _bindgen_ty_16 = 2041;
pub const DER_NVME_IO: _bindgen_ty_16 = 2042;
pub const DER_NO_CERT: _bindgen_ty_16 = 2043;
pub const DER_BAD_CERT: _bindgen_ty_16 = 2044;
pub const DER_VOS_PARTIAL_UPDATE: _bindgen_ty_16 = 2045;
pub const DER_CHKPT_BUSY: _bindgen_ty_16 = 2046;
pub const DER_DIV_BY_ZERO: _bindgen_ty_16 = 2047;
pub const DER_ERR_DAOS_LIMIT: _bindgen_ty_16 = 2048;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
extern "C" {
    pub fn d_errstr(rc: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn d_errno_register_range(
        start: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
        error_strings: *const *const ::std::os::raw::c_char,
        strerror: *const *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d_errno_deregister_range(start: ::std::os::raw::c_int);
}
extern "C" {
    pub fn d_errdesc(errnum: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
pub type daos_size_t = u64;
pub type daos_off_t = u64;
pub const daos_anchor_type_t_DAOS_ANCHOR_TYPE_ZERO: daos_anchor_type_t = 0;
pub const daos_anchor_type_t_DAOS_ANCHOR_TYPE_HKEY: daos_anchor_type_t = 1;
pub const daos_anchor_type_t_DAOS_ANCHOR_TYPE_KEY: daos_anchor_type_t = 2;
pub const daos_anchor_type_t_DAOS_ANCHOR_TYPE_EOF: daos_anchor_type_t = 3;
pub type daos_anchor_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_anchor_t {
    pub da_type: u16,
    pub da_shard: u16,
    pub da_flags: u32,
    pub da_sub_anchors: u64,
    pub da_buf: [u8; 104usize],
}
#[test]
fn bindgen_test_layout_daos_anchor_t() {
    const UNINIT: ::std::mem::MaybeUninit<daos_anchor_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_anchor_t>(),
        120usize,
        concat!("Size of: ", stringify!(daos_anchor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_anchor_t>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_anchor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).da_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_anchor_t),
            "::",
            stringify!(da_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).da_shard) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_anchor_t),
            "::",
            stringify!(da_shard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).da_flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_anchor_t),
            "::",
            stringify!(da_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).da_sub_anchors) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_anchor_t),
            "::",
            stringify!(da_sub_anchors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).da_buf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_anchor_t),
            "::",
            stringify!(da_buf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_handle_t {
    pub cookie: u64,
}
#[test]
fn bindgen_test_layout_daos_handle_t() {
    const UNINIT: ::std::mem::MaybeUninit<daos_handle_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_handle_t>(),
        8usize,
        concat!("Size of: ", stringify!(daos_handle_t))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_handle_t>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_handle_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cookie) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_handle_t),
            "::",
            stringify!(cookie)
        )
    );
}
pub type daos_epoch_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_epoch_range_t {
    pub epr_lo: daos_epoch_t,
    pub epr_hi: daos_epoch_t,
}
#[test]
fn bindgen_test_layout_daos_epoch_range_t() {
    const UNINIT: ::std::mem::MaybeUninit<daos_epoch_range_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_epoch_range_t>(),
        16usize,
        concat!("Size of: ", stringify!(daos_epoch_range_t))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_epoch_range_t>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_epoch_range_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).epr_lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_epoch_range_t),
            "::",
            stringify!(epr_lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).epr_hi) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_epoch_range_t),
            "::",
            stringify!(epr_hi)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_cont_info_t {
    pub ci_uuid: uuid_t,
    pub ci_lsnapshot: daos_epoch_t,
    pub ci_nhandles: u32,
    pub ci_nsnapshots: u32,
    pub ci_md_otime: u64,
    pub ci_md_mtime: u64,
}
#[test]
fn bindgen_test_layout_daos_cont_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<daos_cont_info_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_cont_info_t>(),
        48usize,
        concat!("Size of: ", stringify!(daos_cont_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_cont_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_cont_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ci_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_cont_info_t),
            "::",
            stringify!(ci_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ci_lsnapshot) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_cont_info_t),
            "::",
            stringify!(ci_lsnapshot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ci_nhandles) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_cont_info_t),
            "::",
            stringify!(ci_nhandles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ci_nsnapshots) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_cont_info_t),
            "::",
            stringify!(ci_nsnapshots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ci_md_otime) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_cont_info_t),
            "::",
            stringify!(ci_md_otime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ci_md_mtime) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_cont_info_t),
            "::",
            stringify!(ci_md_mtime)
        )
    );
}
pub type daos_key_t = d_iov_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_event {
    pub ev_error: ::std::os::raw::c_int,
    pub ev_private: daos_event__bindgen_ty_1,
    pub ev_debug: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_event__bindgen_ty_1 {
    pub space: [u64; 20usize],
}
#[test]
fn bindgen_test_layout_daos_event__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<daos_event__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_event__bindgen_ty_1>(),
        160usize,
        concat!("Size of: ", stringify!(daos_event__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_event__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_event__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_event__bindgen_ty_1),
            "::",
            stringify!(space)
        )
    );
}
#[test]
fn bindgen_test_layout_daos_event() {
    const UNINIT: ::std::mem::MaybeUninit<daos_event> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_event>(),
        176usize,
        concat!("Size of: ", stringify!(daos_event))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_event>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_event))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ev_error) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_event),
            "::",
            stringify!(ev_error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ev_private) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_event),
            "::",
            stringify!(ev_private)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ev_debug) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_event),
            "::",
            stringify!(ev_debug)
        )
    );
}
pub type daos_event_t = daos_event;
pub const daos_eq_query_t_DAOS_EQR_COMPLETED: daos_eq_query_t = 1;
pub const daos_eq_query_t_DAOS_EQR_WAITING: daos_eq_query_t = 2;
pub const daos_eq_query_t_DAOS_EQR_ALL: daos_eq_query_t = 3;
pub type daos_eq_query_t = ::std::os::raw::c_uint;
pub const daos_ev_status_t_DAOS_EVS_READY: daos_ev_status_t = 0;
pub const daos_ev_status_t_DAOS_EVS_RUNNING: daos_ev_status_t = 1;
pub const daos_ev_status_t_DAOS_EVS_COMPLETED: daos_ev_status_t = 2;
pub const daos_ev_status_t_DAOS_EVS_ABORTED: daos_ev_status_t = 3;
pub type daos_ev_status_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct d_tgt_list {
    pub tl_ranks: *mut d_rank_t,
    pub tl_tgts: *mut i32,
    pub tl_nr: u32,
}
#[test]
fn bindgen_test_layout_d_tgt_list() {
    const UNINIT: ::std::mem::MaybeUninit<d_tgt_list> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<d_tgt_list>(),
        24usize,
        concat!("Size of: ", stringify!(d_tgt_list))
    );
    assert_eq!(
        ::std::mem::align_of::<d_tgt_list>(),
        8usize,
        concat!("Alignment of ", stringify!(d_tgt_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tl_ranks) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(d_tgt_list),
            "::",
            stringify!(tl_ranks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tl_tgts) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(d_tgt_list),
            "::",
            stringify!(tl_tgts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tl_nr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(d_tgt_list),
            "::",
            stringify!(tl_nr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_eq {
    _unused: [u8; 0],
}
pub const DAOS_HTYPE_EQ: _bindgen_ty_17 = 1;
pub const DAOS_HTYPE_POOL: _bindgen_ty_17 = 3;
pub const DAOS_HTYPE_CO: _bindgen_ty_17 = 5;
pub const DAOS_HTYPE_OBJ: _bindgen_ty_17 = 7;
pub const DAOS_HTYPE_ARRAY: _bindgen_ty_17 = 9;
pub const DAOS_HTYPE_TX: _bindgen_ty_17 = 11;
pub const DAOS_HTYPE_KV: _bindgen_ty_17 = 13;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_obj_id_t {
    pub lo: u64,
    pub hi: u64,
}
#[test]
fn bindgen_test_layout_daos_obj_id_t() {
    const UNINIT: ::std::mem::MaybeUninit<daos_obj_id_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_obj_id_t>(),
        16usize,
        concat!("Size of: ", stringify!(daos_obj_id_t))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_obj_id_t>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_obj_id_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_obj_id_t),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_obj_id_t),
            "::",
            stringify!(hi)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_rank_uri {
    pub dru_rank: u32,
    pub dru_uri: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_daos_rank_uri() {
    const UNINIT: ::std::mem::MaybeUninit<daos_rank_uri> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_rank_uri>(),
        16usize,
        concat!("Size of: ", stringify!(daos_rank_uri))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_rank_uri>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_rank_uri))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dru_rank) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_rank_uri),
            "::",
            stringify!(dru_rank)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dru_uri) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_rank_uri),
            "::",
            stringify!(dru_uri)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_sys_info {
    pub dsi_system_name: [::std::os::raw::c_char; 64usize],
    pub dsi_fabric_provider: [::std::os::raw::c_char; 64usize],
    pub dsi_nr_ranks: u32,
    pub dsi_ranks: *mut daos_rank_uri,
}
#[test]
fn bindgen_test_layout_daos_sys_info() {
    const UNINIT: ::std::mem::MaybeUninit<daos_sys_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_sys_info>(),
        144usize,
        concat!("Size of: ", stringify!(daos_sys_info))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_sys_info>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_sys_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsi_system_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_sys_info),
            "::",
            stringify!(dsi_system_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsi_fabric_provider) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_sys_info),
            "::",
            stringify!(dsi_fabric_provider)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsi_nr_ranks) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_sys_info),
            "::",
            stringify!(dsi_nr_ranks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsi_ranks) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_sys_info),
            "::",
            stringify!(dsi_ranks)
        )
    );
}
extern "C" {
    pub fn daos_eq_create(eqh: *mut daos_handle_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_eq_destroy(
        eqh: daos_handle_t,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_eq_poll(
        eqh: daos_handle_t,
        wait_running: ::std::os::raw::c_int,
        timeout: i64,
        nevents: ::std::os::raw::c_uint,
        events: *mut *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_eq_query(
        eqh: daos_handle_t,
        query: daos_eq_query_t,
        nevents: ::std::os::raw::c_uint,
        events: *mut *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_event_init(
        ev: *mut daos_event_t,
        eqh: daos_handle_t,
        parent: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_event_fini(ev: *mut daos_event_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_event_next(
        parent: *mut daos_event_t,
        child: *mut daos_event_t,
    ) -> *mut daos_event_t;
}
extern "C" {
    pub fn daos_event_test(
        ev: *mut daos_event,
        timeout: i64,
        flag: *mut bool,
    ) -> ::std::os::raw::c_int;
}
pub type daos_event_comp_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut daos_event_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn daos_event_register_comp_cb(
        ev: *mut daos_event,
        cb: daos_event_comp_cb_t,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_event_parent_barrier(ev: *mut daos_event) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_event_abort(ev: *mut daos_event_t) -> ::std::os::raw::c_int;
}
pub const daos_obj_redun_OR_RP_1: daos_obj_redun = 1;
pub const daos_obj_redun_OR_RP_2: daos_obj_redun = 8;
pub const daos_obj_redun_OR_RP_3: daos_obj_redun = 9;
pub const daos_obj_redun_OR_RP_4: daos_obj_redun = 10;
pub const daos_obj_redun_OR_RP_5: daos_obj_redun = 11;
pub const daos_obj_redun_OR_RP_6: daos_obj_redun = 12;
pub const daos_obj_redun_OR_RP_8: daos_obj_redun = 13;
pub const daos_obj_redun_OR_RP_12: daos_obj_redun = 14;
pub const daos_obj_redun_OR_RP_16: daos_obj_redun = 15;
pub const daos_obj_redun_OR_RP_24: daos_obj_redun = 16;
pub const daos_obj_redun_OR_RP_32: daos_obj_redun = 17;
pub const daos_obj_redun_OR_RP_48: daos_obj_redun = 18;
pub const daos_obj_redun_OR_RP_64: daos_obj_redun = 19;
pub const daos_obj_redun_OR_RP_128: daos_obj_redun = 20;
pub const daos_obj_redun_OR_RS_2P1: daos_obj_redun = 32;
pub const daos_obj_redun_OR_RS_2P2: daos_obj_redun = 33;
pub const daos_obj_redun_OR_RS_4P1: daos_obj_redun = 34;
pub const daos_obj_redun_OR_RS_4P2: daos_obj_redun = 35;
pub const daos_obj_redun_OR_RS_8P1: daos_obj_redun = 36;
pub const daos_obj_redun_OR_RS_8P2: daos_obj_redun = 37;
pub const daos_obj_redun_OR_RS_16P1: daos_obj_redun = 38;
pub const daos_obj_redun_OR_RS_16P2: daos_obj_redun = 39;
pub type daos_obj_redun = ::std::os::raw::c_uint;
pub const OC_UNKNOWN: _bindgen_ty_18 = 0;
pub const OC_BACK_COMPAT: _bindgen_ty_18 = 50;
pub const OC_TINY: _bindgen_ty_18 = 51;
pub const OC_SMALL: _bindgen_ty_18 = 52;
pub const OC_LARGE: _bindgen_ty_18 = 53;
pub const OC_MAX: _bindgen_ty_18 = 54;
pub const OC_RP_TINY: _bindgen_ty_18 = 60;
pub const OC_RP_SMALL: _bindgen_ty_18 = 61;
pub const OC_RP_LARGE: _bindgen_ty_18 = 62;
pub const OC_RP_MAX: _bindgen_ty_18 = 63;
pub const OC_RP_SF_TINY: _bindgen_ty_18 = 70;
pub const OC_RP_SF_SMALL: _bindgen_ty_18 = 71;
pub const OC_RP_SF_LARGE: _bindgen_ty_18 = 72;
pub const OC_RP_SF_MAX: _bindgen_ty_18 = 73;
pub const OC_RP_XSF: _bindgen_ty_18 = 80;
pub const OC_EC_TINY: _bindgen_ty_18 = 100;
pub const OC_EC_SMALL: _bindgen_ty_18 = 101;
pub const OC_EC_LARGE: _bindgen_ty_18 = 102;
pub const OC_EC_MAX: _bindgen_ty_18 = 103;
pub const OC_S1: _bindgen_ty_18 = 16777217;
pub const OC_S2: _bindgen_ty_18 = 16777218;
pub const OC_S4: _bindgen_ty_18 = 16777220;
pub const OC_S6: _bindgen_ty_18 = 16777222;
pub const OC_S8: _bindgen_ty_18 = 16777224;
pub const OC_S12: _bindgen_ty_18 = 16777228;
pub const OC_S16: _bindgen_ty_18 = 16777232;
pub const OC_S32: _bindgen_ty_18 = 16777248;
pub const OC_SX: _bindgen_ty_18 = 16842751;
pub const OC_RP_2G1: _bindgen_ty_18 = 134217729;
pub const OC_RP_2G2: _bindgen_ty_18 = 134217730;
pub const OC_RP_2G4: _bindgen_ty_18 = 134217732;
pub const OC_RP_2G6: _bindgen_ty_18 = 134217734;
pub const OC_RP_2G8: _bindgen_ty_18 = 134217736;
pub const OC_RP_2G12: _bindgen_ty_18 = 134217740;
pub const OC_RP_2G16: _bindgen_ty_18 = 134217744;
pub const OC_RP_2G32: _bindgen_ty_18 = 134217760;
pub const OC_RP_2GX: _bindgen_ty_18 = 134283263;
pub const OC_RP_3G1: _bindgen_ty_18 = 150994945;
pub const OC_RP_3G2: _bindgen_ty_18 = 150994946;
pub const OC_RP_3G4: _bindgen_ty_18 = 150994948;
pub const OC_RP_3G6: _bindgen_ty_18 = 150994950;
pub const OC_RP_3G8: _bindgen_ty_18 = 150994952;
pub const OC_RP_3G12: _bindgen_ty_18 = 150994956;
pub const OC_RP_3G16: _bindgen_ty_18 = 150994960;
pub const OC_RP_3G32: _bindgen_ty_18 = 150994976;
pub const OC_RP_3GX: _bindgen_ty_18 = 151060479;
pub const OC_RP_4G1: _bindgen_ty_18 = 167772161;
pub const OC_RP_4G2: _bindgen_ty_18 = 167772162;
pub const OC_RP_4G4: _bindgen_ty_18 = 167772164;
pub const OC_RP_4G6: _bindgen_ty_18 = 167772166;
pub const OC_RP_4G8: _bindgen_ty_18 = 167772168;
pub const OC_RP_4G12: _bindgen_ty_18 = 167772172;
pub const OC_RP_4G16: _bindgen_ty_18 = 167772176;
pub const OC_RP_4G32: _bindgen_ty_18 = 167772192;
pub const OC_RP_4GX: _bindgen_ty_18 = 167837695;
pub const OC_RP_5G1: _bindgen_ty_18 = 184549377;
pub const OC_RP_5G2: _bindgen_ty_18 = 184549378;
pub const OC_RP_5G4: _bindgen_ty_18 = 184549380;
pub const OC_RP_5G6: _bindgen_ty_18 = 184549382;
pub const OC_RP_5G8: _bindgen_ty_18 = 184549384;
pub const OC_RP_5G12: _bindgen_ty_18 = 184549388;
pub const OC_RP_5G16: _bindgen_ty_18 = 184549392;
pub const OC_RP_5G32: _bindgen_ty_18 = 184549408;
pub const OC_RP_5GX: _bindgen_ty_18 = 184614911;
pub const OC_RP_6G1: _bindgen_ty_18 = 201326593;
pub const OC_RP_6G2: _bindgen_ty_18 = 201326594;
pub const OC_RP_6G4: _bindgen_ty_18 = 201326596;
pub const OC_RP_6G6: _bindgen_ty_18 = 201326598;
pub const OC_RP_6G8: _bindgen_ty_18 = 201326600;
pub const OC_RP_6G12: _bindgen_ty_18 = 201326604;
pub const OC_RP_6G16: _bindgen_ty_18 = 201326608;
pub const OC_RP_6G32: _bindgen_ty_18 = 201326624;
pub const OC_RP_6GX: _bindgen_ty_18 = 201392127;
pub const OC_RP_12G1: _bindgen_ty_18 = 234881025;
pub const OC_RP_16G1: _bindgen_ty_18 = 251658241;
pub const OC_RP_24G1: _bindgen_ty_18 = 268435457;
pub const OC_RP_32G1: _bindgen_ty_18 = 285212673;
pub const OC_RP_48G1: _bindgen_ty_18 = 301989889;
pub const OC_RP_64G1: _bindgen_ty_18 = 318767105;
pub const OC_RP_128G1: _bindgen_ty_18 = 335544321;
pub const OC_EC_2P1G1: _bindgen_ty_18 = 536870913;
pub const OC_EC_2P1G2: _bindgen_ty_18 = 536870914;
pub const OC_EC_2P1G4: _bindgen_ty_18 = 536870916;
pub const OC_EC_2P1G6: _bindgen_ty_18 = 536870918;
pub const OC_EC_2P1G8: _bindgen_ty_18 = 536870920;
pub const OC_EC_2P1G12: _bindgen_ty_18 = 536870924;
pub const OC_EC_2P1G16: _bindgen_ty_18 = 536870928;
pub const OC_EC_2P1G32: _bindgen_ty_18 = 536870944;
pub const OC_EC_2P1GX: _bindgen_ty_18 = 536936447;
pub const OC_EC_2P2G1: _bindgen_ty_18 = 553648129;
pub const OC_EC_2P2G2: _bindgen_ty_18 = 553648130;
pub const OC_EC_2P2G4: _bindgen_ty_18 = 553648132;
pub const OC_EC_2P2G6: _bindgen_ty_18 = 553648134;
pub const OC_EC_2P2G8: _bindgen_ty_18 = 553648136;
pub const OC_EC_2P2G12: _bindgen_ty_18 = 553648140;
pub const OC_EC_2P2G16: _bindgen_ty_18 = 553648144;
pub const OC_EC_2P2G32: _bindgen_ty_18 = 553648160;
pub const OC_EC_2P2GX: _bindgen_ty_18 = 553713663;
pub const OC_EC_4P1G1: _bindgen_ty_18 = 570425345;
pub const OC_EC_4P1G2: _bindgen_ty_18 = 570425346;
pub const OC_EC_4P1G4: _bindgen_ty_18 = 570425348;
pub const OC_EC_4P1G6: _bindgen_ty_18 = 570425350;
pub const OC_EC_4P1G8: _bindgen_ty_18 = 570425352;
pub const OC_EC_4P1G12: _bindgen_ty_18 = 570425356;
pub const OC_EC_4P1G16: _bindgen_ty_18 = 570425360;
pub const OC_EC_4P1G32: _bindgen_ty_18 = 570425376;
pub const OC_EC_4P1GX: _bindgen_ty_18 = 570490879;
pub const OC_EC_4P2G1: _bindgen_ty_18 = 587202561;
pub const OC_EC_4P2G2: _bindgen_ty_18 = 587202562;
pub const OC_EC_4P2G4: _bindgen_ty_18 = 587202564;
pub const OC_EC_4P2G6: _bindgen_ty_18 = 587202566;
pub const OC_EC_4P2G8: _bindgen_ty_18 = 587202568;
pub const OC_EC_4P2G12: _bindgen_ty_18 = 587202572;
pub const OC_EC_4P2G16: _bindgen_ty_18 = 587202576;
pub const OC_EC_4P2G32: _bindgen_ty_18 = 587202592;
pub const OC_EC_4P2GX: _bindgen_ty_18 = 587268095;
pub const OC_EC_8P1G1: _bindgen_ty_18 = 603979777;
pub const OC_EC_8P1G2: _bindgen_ty_18 = 603979778;
pub const OC_EC_8P1G4: _bindgen_ty_18 = 603979780;
pub const OC_EC_8P1G6: _bindgen_ty_18 = 603979782;
pub const OC_EC_8P1G8: _bindgen_ty_18 = 603979784;
pub const OC_EC_8P1G12: _bindgen_ty_18 = 603979788;
pub const OC_EC_8P1G16: _bindgen_ty_18 = 603979792;
pub const OC_EC_8P1G32: _bindgen_ty_18 = 603979808;
pub const OC_EC_8P1GX: _bindgen_ty_18 = 604045311;
pub const OC_EC_8P2G1: _bindgen_ty_18 = 620756993;
pub const OC_EC_8P2G2: _bindgen_ty_18 = 620756994;
pub const OC_EC_8P2G4: _bindgen_ty_18 = 620756996;
pub const OC_EC_8P2G6: _bindgen_ty_18 = 620756998;
pub const OC_EC_8P2G8: _bindgen_ty_18 = 620757000;
pub const OC_EC_8P2G12: _bindgen_ty_18 = 620757004;
pub const OC_EC_8P2G16: _bindgen_ty_18 = 620757008;
pub const OC_EC_8P2G32: _bindgen_ty_18 = 620757024;
pub const OC_EC_8P2GX: _bindgen_ty_18 = 620822527;
pub const OC_EC_16P1G1: _bindgen_ty_18 = 637534209;
pub const OC_EC_16P1G2: _bindgen_ty_18 = 637534210;
pub const OC_EC_16P1G4: _bindgen_ty_18 = 637534212;
pub const OC_EC_16P1G6: _bindgen_ty_18 = 637534214;
pub const OC_EC_16P1G8: _bindgen_ty_18 = 637534216;
pub const OC_EC_16P1G12: _bindgen_ty_18 = 637534220;
pub const OC_EC_16P1G16: _bindgen_ty_18 = 637534224;
pub const OC_EC_16P1G32: _bindgen_ty_18 = 637534240;
pub const OC_EC_16P1GX: _bindgen_ty_18 = 637599743;
pub const OC_EC_16P2G1: _bindgen_ty_18 = 654311425;
pub const OC_EC_16P2G2: _bindgen_ty_18 = 654311426;
pub const OC_EC_16P2G4: _bindgen_ty_18 = 654311428;
pub const OC_EC_16P2G6: _bindgen_ty_18 = 654311430;
pub const OC_EC_16P2G8: _bindgen_ty_18 = 654311432;
pub const OC_EC_16P2G12: _bindgen_ty_18 = 654311436;
pub const OC_EC_16P2G16: _bindgen_ty_18 = 654311440;
pub const OC_EC_16P2G32: _bindgen_ty_18 = 654311456;
pub const OC_EC_16P2GX: _bindgen_ty_18 = 654376959;
pub const OC_RESERVED: _bindgen_ty_18 = 1073741824;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
pub const daos_obj_schema_DAOS_OS_SINGLE: daos_obj_schema = 0;
pub const daos_obj_schema_DAOS_OS_STRIPED: daos_obj_schema = 1;
pub const daos_obj_schema_DAOS_OS_DYN_STRIPED: daos_obj_schema = 2;
pub const daos_obj_schema_DAOS_OS_DYN_CHUNKED: daos_obj_schema = 3;
pub type daos_obj_schema = ::std::os::raw::c_uint;
pub const daos_obj_resil_DAOS_RES_EC: daos_obj_resil = 0;
pub const daos_obj_resil_DAOS_RES_REPL: daos_obj_resil = 1;
pub type daos_obj_resil = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct daos_oclass_attr {
    pub ca_schema: daos_obj_schema,
    pub ca_resil: daos_obj_resil,
    pub ca_resil_degree: ::std::os::raw::c_uint,
    pub ca_grp_nr: ::std::os::raw::c_uint,
    pub u: daos_oclass_attr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union daos_oclass_attr__bindgen_ty_1 {
    pub rp: daos_oclass_attr__bindgen_ty_1_daos_rp_attr,
    pub ec: daos_oclass_attr__bindgen_ty_1_daos_ec_attr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_oclass_attr__bindgen_ty_1_daos_rp_attr {
    pub r_proto: ::std::os::raw::c_uint,
    pub r_num: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_daos_oclass_attr__bindgen_ty_1_daos_rp_attr() {
    const UNINIT: ::std::mem::MaybeUninit<daos_oclass_attr__bindgen_ty_1_daos_rp_attr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_oclass_attr__bindgen_ty_1_daos_rp_attr>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(daos_oclass_attr__bindgen_ty_1_daos_rp_attr)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<daos_oclass_attr__bindgen_ty_1_daos_rp_attr>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(daos_oclass_attr__bindgen_ty_1_daos_rp_attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_proto) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_oclass_attr__bindgen_ty_1_daos_rp_attr),
            "::",
            stringify!(r_proto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_num) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_oclass_attr__bindgen_ty_1_daos_rp_attr),
            "::",
            stringify!(r_num)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_oclass_attr__bindgen_ty_1_daos_ec_attr {
    pub e_k: ::std::os::raw::c_ushort,
    pub e_p: ::std::os::raw::c_ushort,
    pub e_len: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_daos_oclass_attr__bindgen_ty_1_daos_ec_attr() {
    const UNINIT: ::std::mem::MaybeUninit<daos_oclass_attr__bindgen_ty_1_daos_ec_attr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_oclass_attr__bindgen_ty_1_daos_ec_attr>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(daos_oclass_attr__bindgen_ty_1_daos_ec_attr)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<daos_oclass_attr__bindgen_ty_1_daos_ec_attr>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(daos_oclass_attr__bindgen_ty_1_daos_ec_attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_k) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_oclass_attr__bindgen_ty_1_daos_ec_attr),
            "::",
            stringify!(e_k)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_p) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_oclass_attr__bindgen_ty_1_daos_ec_attr),
            "::",
            stringify!(e_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_len) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_oclass_attr__bindgen_ty_1_daos_ec_attr),
            "::",
            stringify!(e_len)
        )
    );
}
#[test]
fn bindgen_test_layout_daos_oclass_attr__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<daos_oclass_attr__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_oclass_attr__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(daos_oclass_attr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_oclass_attr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(daos_oclass_attr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_oclass_attr__bindgen_ty_1),
            "::",
            stringify!(rp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_oclass_attr__bindgen_ty_1),
            "::",
            stringify!(ec)
        )
    );
}
#[test]
fn bindgen_test_layout_daos_oclass_attr() {
    const UNINIT: ::std::mem::MaybeUninit<daos_oclass_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_oclass_attr>(),
        24usize,
        concat!("Size of: ", stringify!(daos_oclass_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_oclass_attr>(),
        4usize,
        concat!("Alignment of ", stringify!(daos_oclass_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ca_schema) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_oclass_attr),
            "::",
            stringify!(ca_schema)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ca_resil) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_oclass_attr),
            "::",
            stringify!(ca_resil)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ca_resil_degree) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_oclass_attr),
            "::",
            stringify!(ca_resil_degree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ca_grp_nr) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_oclass_attr),
            "::",
            stringify!(ca_grp_nr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_oclass_attr),
            "::",
            stringify!(u)
        )
    );
}
pub type daos_oclass_id_t = u32;
pub type daos_oclass_hints_t = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_oclass_list {
    pub cl_nr: u32,
    pub cl_nr_out: u32,
    pub cl_cids: *mut daos_oclass_id_t,
    pub cl_cattrs: *mut daos_oclass_attr,
}
#[test]
fn bindgen_test_layout_daos_oclass_list() {
    const UNINIT: ::std::mem::MaybeUninit<daos_oclass_list> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_oclass_list>(),
        24usize,
        concat!("Size of: ", stringify!(daos_oclass_list))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_oclass_list>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_oclass_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cl_nr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_oclass_list),
            "::",
            stringify!(cl_nr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cl_nr_out) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_oclass_list),
            "::",
            stringify!(cl_nr_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cl_cids) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_oclass_list),
            "::",
            stringify!(cl_cids)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cl_cattrs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_oclass_list),
            "::",
            stringify!(cl_cattrs)
        )
    );
}
extern "C" {
    pub fn daos_oclass_name2id(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_oclass_names_list(size: usize, str_: *mut ::std::os::raw::c_char) -> isize;
}
extern "C" {
    pub fn daos_oclass_nr(opts: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_oclass_id2name(
        oc_id: daos_oclass_id_t,
        name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_obj_register_class(
        coh: daos_handle_t,
        cid: daos_oclass_id_t,
        attr: *mut daos_oclass_attr,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_obj_query_class(
        coh: daos_handle_t,
        cid: daos_oclass_id_t,
        attr: *mut daos_oclass_attr,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_obj_list_class(
        coh: daos_handle_t,
        list: *mut daos_oclass_list,
        anchor: *mut daos_anchor_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
pub const daos_pool_props_DAOS_PROP_PO_MIN: daos_pool_props = 0;
pub const daos_pool_props_DAOS_PROP_PO_LABEL: daos_pool_props = 1;
pub const daos_pool_props_DAOS_PROP_PO_ACL: daos_pool_props = 2;
pub const daos_pool_props_DAOS_PROP_PO_SPACE_RB: daos_pool_props = 3;
pub const daos_pool_props_DAOS_PROP_PO_SELF_HEAL: daos_pool_props = 4;
pub const daos_pool_props_DAOS_PROP_PO_RECLAIM: daos_pool_props = 5;
pub const daos_pool_props_DAOS_PROP_PO_OWNER: daos_pool_props = 6;
pub const daos_pool_props_DAOS_PROP_PO_OWNER_GROUP: daos_pool_props = 7;
pub const daos_pool_props_DAOS_PROP_PO_SVC_LIST: daos_pool_props = 8;
pub const daos_pool_props_DAOS_PROP_PO_EC_CELL_SZ: daos_pool_props = 9;
pub const daos_pool_props_DAOS_PROP_PO_POLICY: daos_pool_props = 10;
pub const daos_pool_props_DAOS_PROP_PO_REDUN_FAC: daos_pool_props = 11;
pub const daos_pool_props_DAOS_PROP_PO_EC_PDA: daos_pool_props = 12;
pub const daos_pool_props_DAOS_PROP_PO_RP_PDA: daos_pool_props = 13;
pub const daos_pool_props_DAOS_PROP_PO_GLOBAL_VERSION: daos_pool_props = 14;
pub const daos_pool_props_DAOS_PROP_PO_UPGRADE_STATUS: daos_pool_props = 15;
pub const daos_pool_props_DAOS_PROP_PO_SCRUB_MODE: daos_pool_props = 16;
pub const daos_pool_props_DAOS_PROP_PO_SCRUB_FREQ: daos_pool_props = 17;
pub const daos_pool_props_DAOS_PROP_PO_SCRUB_THRESH: daos_pool_props = 18;
pub const daos_pool_props_DAOS_PROP_PO_SVC_REDUN_FAC: daos_pool_props = 19;
pub const daos_pool_props_DAOS_PROP_PO_OBJ_VERSION: daos_pool_props = 20;
pub const daos_pool_props_DAOS_PROP_PO_PERF_DOMAIN: daos_pool_props = 21;
pub const daos_pool_props_DAOS_PROP_PO_CHECKPOINT_MODE: daos_pool_props = 22;
pub const daos_pool_props_DAOS_PROP_PO_CHECKPOINT_FREQ: daos_pool_props = 23;
pub const daos_pool_props_DAOS_PROP_PO_CHECKPOINT_THRESH: daos_pool_props = 24;
pub const daos_pool_props_DAOS_PROP_PO_REINT_MODE: daos_pool_props = 25;
pub const daos_pool_props_DAOS_PROP_PO_MAX: daos_pool_props = 26;
pub type daos_pool_props = ::std::os::raw::c_uint;
pub const DAOS_UPGRADE_STATUS_NOT_STARTED: _bindgen_ty_19 = 0;
pub const DAOS_UPGRADE_STATUS_IN_PROGRESS: _bindgen_ty_19 = 1;
pub const DAOS_UPGRADE_STATUS_COMPLETED: _bindgen_ty_19 = 2;
pub const DAOS_UPGRADE_STATUS_FAILED: _bindgen_ty_19 = 3;
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
pub const DAOS_RECLAIM_DISABLED: _bindgen_ty_20 = 0;
pub const DAOS_RECLAIM_LAZY: _bindgen_ty_20 = 1;
pub const DAOS_RECLAIM_SNAPSHOT: _bindgen_ty_20 = 2;
pub const DAOS_RECLAIM_BATCH: _bindgen_ty_20 = 3;
pub const DAOS_RECLAIM_TIME: _bindgen_ty_20 = 4;
pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
pub const DAOS_REINT_MODE_DATA_SYNC: _bindgen_ty_21 = 0;
pub const DAOS_REINT_MODE_NO_DATA_SYNC: _bindgen_ty_21 = 1;
pub type _bindgen_ty_21 = ::std::os::raw::c_uint;
pub const DAOS_SCRUB_MODE_OFF: _bindgen_ty_22 = 0;
pub const DAOS_SCRUB_MODE_LAZY: _bindgen_ty_22 = 1;
pub const DAOS_SCRUB_MODE_TIMED: _bindgen_ty_22 = 2;
pub const DAOS_SCRUB_MODE_INVALID: _bindgen_ty_22 = 3;
pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
pub const DAOS_CHECKPOINT_DISABLED: _bindgen_ty_23 = 0;
pub const DAOS_CHECKPOINT_TIMED: _bindgen_ty_23 = 1;
pub const DAOS_CHECKPOINT_LAZY: _bindgen_ty_23 = 2;
pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
pub const daos_cont_props_DAOS_PROP_CO_MIN: daos_cont_props = 4096;
pub const daos_cont_props_DAOS_PROP_CO_LABEL: daos_cont_props = 4097;
pub const daos_cont_props_DAOS_PROP_CO_LAYOUT_TYPE: daos_cont_props = 4098;
pub const daos_cont_props_DAOS_PROP_CO_LAYOUT_VER: daos_cont_props = 4099;
pub const daos_cont_props_DAOS_PROP_CO_CSUM: daos_cont_props = 4100;
pub const daos_cont_props_DAOS_PROP_CO_CSUM_CHUNK_SIZE: daos_cont_props = 4101;
pub const daos_cont_props_DAOS_PROP_CO_CSUM_SERVER_VERIFY: daos_cont_props = 4102;
pub const daos_cont_props_DAOS_PROP_CO_REDUN_FAC: daos_cont_props = 4103;
pub const daos_cont_props_DAOS_PROP_CO_REDUN_LVL: daos_cont_props = 4104;
pub const daos_cont_props_DAOS_PROP_CO_SNAPSHOT_MAX: daos_cont_props = 4105;
pub const daos_cont_props_DAOS_PROP_CO_ACL: daos_cont_props = 4106;
pub const daos_cont_props_DAOS_PROP_CO_COMPRESS: daos_cont_props = 4107;
pub const daos_cont_props_DAOS_PROP_CO_ENCRYPT: daos_cont_props = 4108;
pub const daos_cont_props_DAOS_PROP_CO_OWNER: daos_cont_props = 4109;
pub const daos_cont_props_DAOS_PROP_CO_OWNER_GROUP: daos_cont_props = 4110;
pub const daos_cont_props_DAOS_PROP_CO_DEDUP: daos_cont_props = 4111;
pub const daos_cont_props_DAOS_PROP_CO_DEDUP_THRESHOLD: daos_cont_props = 4112;
pub const daos_cont_props_DAOS_PROP_CO_ROOTS: daos_cont_props = 4113;
pub const daos_cont_props_DAOS_PROP_CO_STATUS: daos_cont_props = 4114;
pub const daos_cont_props_DAOS_PROP_CO_ALLOCED_OID: daos_cont_props = 4115;
pub const daos_cont_props_DAOS_PROP_CO_EC_CELL_SZ: daos_cont_props = 4116;
pub const daos_cont_props_DAOS_PROP_CO_EC_PDA: daos_cont_props = 4117;
pub const daos_cont_props_DAOS_PROP_CO_RP_PDA: daos_cont_props = 4118;
pub const daos_cont_props_DAOS_PROP_CO_GLOBAL_VERSION: daos_cont_props = 4119;
pub const daos_cont_props_DAOS_PROP_CO_SCRUBBER_DISABLED: daos_cont_props = 4120;
pub const daos_cont_props_DAOS_PROP_CO_OBJ_VERSION: daos_cont_props = 4121;
pub const daos_cont_props_DAOS_PROP_CO_MAX: daos_cont_props = 4122;
pub type daos_cont_props = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_prop_co_roots {
    pub cr_oids: [daos_obj_id_t; 4usize],
}
#[test]
fn bindgen_test_layout_daos_prop_co_roots() {
    const UNINIT: ::std::mem::MaybeUninit<daos_prop_co_roots> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_prop_co_roots>(),
        64usize,
        concat!("Size of: ", stringify!(daos_prop_co_roots))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_prop_co_roots>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_prop_co_roots))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cr_oids) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_prop_co_roots),
            "::",
            stringify!(cr_oids)
        )
    );
}
pub type daos_cont_layout_t = u16;
pub const DAOS_PROP_CO_LAYOUT_UNKNOWN: _bindgen_ty_24 = 0;
pub const DAOS_PROP_CO_LAYOUT_UNKOWN: _bindgen_ty_24 = 0;
pub const DAOS_PROP_CO_LAYOUT_POSIX: _bindgen_ty_24 = 1;
pub const DAOS_PROP_CO_LAYOUT_HDF5: _bindgen_ty_24 = 2;
pub const DAOS_PROP_CO_LAYOUT_PYTHON: _bindgen_ty_24 = 3;
pub const DAOS_PROP_CO_LAYOUT_SPARK: _bindgen_ty_24 = 4;
pub const DAOS_PROP_CO_LAYOUT_DATABASE: _bindgen_ty_24 = 5;
pub const DAOS_PROP_CO_LAYOUT_ROOT: _bindgen_ty_24 = 6;
pub const DAOS_PROP_CO_LAYOUT_SEISMIC: _bindgen_ty_24 = 7;
pub const DAOS_PROP_CO_LAYOUT_METEO: _bindgen_ty_24 = 8;
pub const DAOS_PROP_CO_LAYOUT_MAX: _bindgen_ty_24 = 9;
pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
pub const DAOS_PROP_CO_CSUM_OFF: _bindgen_ty_25 = 0;
pub const DAOS_PROP_CO_CSUM_CRC16: _bindgen_ty_25 = 1;
pub const DAOS_PROP_CO_CSUM_CRC32: _bindgen_ty_25 = 2;
pub const DAOS_PROP_CO_CSUM_CRC64: _bindgen_ty_25 = 3;
pub const DAOS_PROP_CO_CSUM_SHA1: _bindgen_ty_25 = 4;
pub const DAOS_PROP_CO_CSUM_SHA256: _bindgen_ty_25 = 5;
pub const DAOS_PROP_CO_CSUM_SHA512: _bindgen_ty_25 = 6;
pub const DAOS_PROP_CO_CSUM_ADLER32: _bindgen_ty_25 = 7;
pub type _bindgen_ty_25 = ::std::os::raw::c_uint;
pub const DAOS_PROP_CO_CSUM_SV_OFF: _bindgen_ty_26 = 0;
pub const DAOS_PROP_CO_CSUM_SV_ON: _bindgen_ty_26 = 1;
pub type _bindgen_ty_26 = ::std::os::raw::c_uint;
pub const DAOS_PROP_CO_DEDUP_OFF: _bindgen_ty_27 = 0;
pub const DAOS_PROP_CO_DEDUP_MEMCMP: _bindgen_ty_27 = 1;
pub const DAOS_PROP_CO_DEDUP_HASH: _bindgen_ty_27 = 2;
pub type _bindgen_ty_27 = ::std::os::raw::c_uint;
pub const DAOS_PROP_CO_COMPRESS_OFF: _bindgen_ty_28 = 0;
pub const DAOS_PROP_CO_COMPRESS_LZ4: _bindgen_ty_28 = 1;
pub const DAOS_PROP_CO_COMPRESS_DEFLATE: _bindgen_ty_28 = 2;
pub const DAOS_PROP_CO_COMPRESS_DEFLATE1: _bindgen_ty_28 = 3;
pub const DAOS_PROP_CO_COMPRESS_DEFLATE2: _bindgen_ty_28 = 4;
pub const DAOS_PROP_CO_COMPRESS_DEFLATE3: _bindgen_ty_28 = 5;
pub const DAOS_PROP_CO_COMPRESS_DEFLATE4: _bindgen_ty_28 = 6;
pub type _bindgen_ty_28 = ::std::os::raw::c_uint;
pub const DAOS_PROP_CO_ENCRYPT_OFF: _bindgen_ty_29 = 0;
pub const DAOS_PROP_CO_ENCRYPT_AES_XTS128: _bindgen_ty_29 = 1;
pub const DAOS_PROP_CO_ENCRYPT_AES_XTS256: _bindgen_ty_29 = 2;
pub const DAOS_PROP_CO_ENCRYPT_AES_CBC128: _bindgen_ty_29 = 3;
pub const DAOS_PROP_CO_ENCRYPT_AES_CBC192: _bindgen_ty_29 = 4;
pub const DAOS_PROP_CO_ENCRYPT_AES_CBC256: _bindgen_ty_29 = 5;
pub const DAOS_PROP_CO_ENCRYPT_AES_GCM128: _bindgen_ty_29 = 6;
pub const DAOS_PROP_CO_ENCRYPT_AES_GCM256: _bindgen_ty_29 = 7;
pub type _bindgen_ty_29 = ::std::os::raw::c_uint;
pub const DAOS_PROP_CO_REDUN_RF0: _bindgen_ty_30 = 0;
pub const DAOS_PROP_CO_REDUN_RF1: _bindgen_ty_30 = 1;
pub const DAOS_PROP_CO_REDUN_RF2: _bindgen_ty_30 = 2;
pub const DAOS_PROP_CO_REDUN_RF3: _bindgen_ty_30 = 3;
pub const DAOS_PROP_CO_REDUN_RF4: _bindgen_ty_30 = 4;
pub type _bindgen_ty_30 = ::std::os::raw::c_uint;
pub const DAOS_PROP_CO_REDUN_MIN: _bindgen_ty_31 = 1;
pub const DAOS_PROP_CO_REDUN_RANK: _bindgen_ty_31 = 1;
pub const DAOS_PROP_CO_REDUN_NODE: _bindgen_ty_31 = 2;
pub const DAOS_PROP_CO_REDUN_MAX: _bindgen_ty_31 = 254;
pub type _bindgen_ty_31 = ::std::os::raw::c_uint;
pub const DAOS_PROP_CO_HEALTHY: _bindgen_ty_32 = 0;
pub const DAOS_PROP_CO_UNCLEAN: _bindgen_ty_32 = 1;
pub type _bindgen_ty_32 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_co_status {
    pub dcs_status: u16,
    pub dcs_flags: u16,
    pub dcs_pm_ver: u32,
}
#[test]
fn bindgen_test_layout_daos_co_status() {
    const UNINIT: ::std::mem::MaybeUninit<daos_co_status> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_co_status>(),
        8usize,
        concat!("Size of: ", stringify!(daos_co_status))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_co_status>(),
        4usize,
        concat!("Alignment of ", stringify!(daos_co_status))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dcs_status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_co_status),
            "::",
            stringify!(dcs_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dcs_flags) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_co_status),
            "::",
            stringify!(dcs_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dcs_pm_ver) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_co_status),
            "::",
            stringify!(dcs_pm_ver)
        )
    );
}
pub const DAOS_PROP_ENTRY_NOT_SET: _bindgen_ty_33 = 1;
pub type _bindgen_ty_33 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct daos_prop_entry {
    pub dpe_type: u32,
    pub dpe_flags: u16,
    pub dpe_reserv: u16,
    pub __bindgen_anon_1: daos_prop_entry__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union daos_prop_entry__bindgen_ty_1 {
    pub dpe_val: u64,
    pub dpe_str: d_string_t,
    pub dpe_val_ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_daos_prop_entry__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<daos_prop_entry__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_prop_entry__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(daos_prop_entry__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_prop_entry__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_prop_entry__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dpe_val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_prop_entry__bindgen_ty_1),
            "::",
            stringify!(dpe_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dpe_str) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_prop_entry__bindgen_ty_1),
            "::",
            stringify!(dpe_str)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dpe_val_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_prop_entry__bindgen_ty_1),
            "::",
            stringify!(dpe_val_ptr)
        )
    );
}
#[test]
fn bindgen_test_layout_daos_prop_entry() {
    const UNINIT: ::std::mem::MaybeUninit<daos_prop_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_prop_entry>(),
        16usize,
        concat!("Size of: ", stringify!(daos_prop_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_prop_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_prop_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dpe_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_prop_entry),
            "::",
            stringify!(dpe_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dpe_flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_prop_entry),
            "::",
            stringify!(dpe_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dpe_reserv) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_prop_entry),
            "::",
            stringify!(dpe_reserv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_prop_t {
    pub dpp_nr: u32,
    pub dpp_reserv: u32,
    pub dpp_entries: *mut daos_prop_entry,
}
#[test]
fn bindgen_test_layout_daos_prop_t() {
    const UNINIT: ::std::mem::MaybeUninit<daos_prop_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_prop_t>(),
        16usize,
        concat!("Size of: ", stringify!(daos_prop_t))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_prop_t>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_prop_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dpp_nr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_prop_t),
            "::",
            stringify!(dpp_nr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dpp_reserv) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_prop_t),
            "::",
            stringify!(dpp_reserv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dpp_entries) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_prop_t),
            "::",
            stringify!(dpp_entries)
        )
    );
}
extern "C" {
    pub fn daos_prop_alloc(entries_nr: u32) -> *mut daos_prop_t;
}
extern "C" {
    pub fn daos_prop_fini(prop: *mut daos_prop_t);
}
extern "C" {
    pub fn daos_prop_free(prop: *mut daos_prop_t);
}
extern "C" {
    pub fn daos_prop_from_str(
        str_: *const ::std::os::raw::c_char,
        len: daos_size_t,
        prop: *mut *mut daos_prop_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_prop_merge2(
        old_prop: *mut daos_prop_t,
        new_prop: *mut daos_prop_t,
        out_prop: *mut *mut daos_prop_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_prop_merge(
        old_prop: *mut daos_prop_t,
        new_prop: *mut daos_prop_t,
    ) -> *mut daos_prop_t;
}
extern "C" {
    pub fn daos_prop_entry_get(prop: *mut daos_prop_t, type_: u32) -> *mut daos_prop_entry;
}
extern "C" {
    pub fn daos_prop_set_str(
        prop: *mut daos_prop_t,
        type_: u32,
        str_: *const ::std::os::raw::c_char,
        len: daos_size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_prop_entry_set_str(
        entry: *mut daos_prop_entry,
        str_: *const ::std::os::raw::c_char,
        len: daos_size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_prop_set_ptr(
        prop: *mut daos_prop_t,
        type_: u32,
        ptr: *const ::std::os::raw::c_void,
        size: daos_size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_prop_entry_set_ptr(
        entry: *mut daos_prop_entry,
        ptr: *const ::std::os::raw::c_void,
        size: daos_size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_prop_entry_dup_ptr(
        entry_dst: *mut daos_prop_entry,
        entry_src: *mut daos_prop_entry,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_prop_entry_cmp_acl(
        entry1: *mut daos_prop_entry,
        entry2: *mut daos_prop_entry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_prop_entry_dup_co_roots(
        dst: *mut daos_prop_entry,
        src: *mut daos_prop_entry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_prop_has_str(entry: *mut daos_prop_entry) -> bool;
}
extern "C" {
    pub fn daos_prop_has_ptr(entry: *mut daos_prop_entry) -> bool;
}
pub const daos_otype_t_DAOS_OT_MULTI_HASHED: daos_otype_t = 0;
pub const daos_otype_t_DAOS_OT_OIT: daos_otype_t = 1;
pub const daos_otype_t_DAOS_OT_DKEY_UINT64: daos_otype_t = 2;
pub const daos_otype_t_DAOS_OT_AKEY_UINT64: daos_otype_t = 3;
pub const daos_otype_t_DAOS_OT_MULTI_UINT64: daos_otype_t = 4;
pub const daos_otype_t_DAOS_OT_DKEY_LEXICAL: daos_otype_t = 5;
pub const daos_otype_t_DAOS_OT_AKEY_LEXICAL: daos_otype_t = 6;
pub const daos_otype_t_DAOS_OT_MULTI_LEXICAL: daos_otype_t = 7;
pub const daos_otype_t_DAOS_OT_KV_HASHED: daos_otype_t = 8;
pub const daos_otype_t_DAOS_OT_KV_UINT64: daos_otype_t = 9;
pub const daos_otype_t_DAOS_OT_KV_LEXICAL: daos_otype_t = 10;
pub const daos_otype_t_DAOS_OT_ARRAY: daos_otype_t = 11;
pub const daos_otype_t_DAOS_OT_ARRAY_ATTR: daos_otype_t = 12;
pub const daos_otype_t_DAOS_OT_ARRAY_BYTE: daos_otype_t = 13;
pub const daos_otype_t_DAOS_OT_OIT_V2: daos_otype_t = 14;
pub const daos_otype_t_DAOS_OT_MAX: daos_otype_t = 14;
pub type daos_otype_t = ::std::os::raw::c_uint;
pub const DAOS_COND_PUNCH: _bindgen_ty_34 = 1;
pub const DAOS_COND_DKEY_INSERT: _bindgen_ty_34 = 2;
pub const DAOS_COND_DKEY_UPDATE: _bindgen_ty_34 = 4;
pub const DAOS_COND_DKEY_FETCH: _bindgen_ty_34 = 8;
pub const DAOS_COND_AKEY_INSERT: _bindgen_ty_34 = 16;
pub const DAOS_COND_AKEY_UPDATE: _bindgen_ty_34 = 32;
pub const DAOS_COND_AKEY_FETCH: _bindgen_ty_34 = 64;
pub const DAOS_COND_PER_AKEY: _bindgen_ty_34 = 128;
pub const DAOS_COND_MASK: _bindgen_ty_34 = 255;
pub type _bindgen_ty_34 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_obj_attr {
    pub oa_rank: d_rank_t,
    pub oa_oa: *mut daos_oclass_attr,
}
#[test]
fn bindgen_test_layout_daos_obj_attr() {
    const UNINIT: ::std::mem::MaybeUninit<daos_obj_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_obj_attr>(),
        16usize,
        concat!("Size of: ", stringify!(daos_obj_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_obj_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_obj_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oa_rank) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_obj_attr),
            "::",
            stringify!(oa_rank)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oa_oa) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_obj_attr),
            "::",
            stringify!(oa_oa)
        )
    );
}
pub const DAOS_OO_RO: _bindgen_ty_35 = 2;
pub const DAOS_OO_RW: _bindgen_ty_35 = 4;
pub const DAOS_OO_EXCL: _bindgen_ty_35 = 8;
pub const DAOS_OO_IO_RAND: _bindgen_ty_35 = 16;
pub const DAOS_OO_IO_SEQ: _bindgen_ty_35 = 32;
pub type _bindgen_ty_35 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_recx_t {
    pub rx_idx: u64,
    pub rx_nr: u64,
}
#[test]
fn bindgen_test_layout_daos_recx_t() {
    const UNINIT: ::std::mem::MaybeUninit<daos_recx_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_recx_t>(),
        16usize,
        concat!("Size of: ", stringify!(daos_recx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_recx_t>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_recx_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rx_idx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_recx_t),
            "::",
            stringify!(rx_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rx_nr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_recx_t),
            "::",
            stringify!(rx_nr)
        )
    );
}
pub const daos_iod_type_t_DAOS_IOD_NONE: daos_iod_type_t = 0;
pub const daos_iod_type_t_DAOS_IOD_SINGLE: daos_iod_type_t = 1;
pub const daos_iod_type_t_DAOS_IOD_ARRAY: daos_iod_type_t = 2;
pub type daos_iod_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_iod_t {
    pub iod_name: daos_key_t,
    pub iod_type: daos_iod_type_t,
    pub iod_size: daos_size_t,
    pub iod_flags: u64,
    pub iod_nr: u32,
    pub iod_recxs: *mut daos_recx_t,
}
#[test]
fn bindgen_test_layout_daos_iod_t() {
    const UNINIT: ::std::mem::MaybeUninit<daos_iod_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_iod_t>(),
        64usize,
        concat!("Size of: ", stringify!(daos_iod_t))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_iod_t>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_iod_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iod_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_iod_t),
            "::",
            stringify!(iod_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iod_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_iod_t),
            "::",
            stringify!(iod_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iod_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_iod_t),
            "::",
            stringify!(iod_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iod_flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_iod_t),
            "::",
            stringify!(iod_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iod_nr) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_iod_t),
            "::",
            stringify!(iod_nr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iod_recxs) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_iod_t),
            "::",
            stringify!(iod_recxs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_iom_t {
    pub iom_type: daos_iod_type_t,
    pub iom_nr: u32,
    pub iom_nr_out: u32,
    pub iom_flags: u32,
    pub iom_size: daos_size_t,
    pub iom_recx_lo: daos_recx_t,
    pub iom_recx_hi: daos_recx_t,
    pub iom_recxs: *mut daos_recx_t,
}
#[test]
fn bindgen_test_layout_daos_iom_t() {
    const UNINIT: ::std::mem::MaybeUninit<daos_iom_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_iom_t>(),
        64usize,
        concat!("Size of: ", stringify!(daos_iom_t))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_iom_t>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_iom_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iom_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_iom_t),
            "::",
            stringify!(iom_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iom_nr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_iom_t),
            "::",
            stringify!(iom_nr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iom_nr_out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_iom_t),
            "::",
            stringify!(iom_nr_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iom_flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_iom_t),
            "::",
            stringify!(iom_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iom_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_iom_t),
            "::",
            stringify!(iom_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iom_recx_lo) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_iom_t),
            "::",
            stringify!(iom_recx_lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iom_recx_hi) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_iom_t),
            "::",
            stringify!(iom_recx_hi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iom_recxs) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_iom_t),
            "::",
            stringify!(iom_recxs)
        )
    );
}
pub const DAOS_REC_ANY: _bindgen_ty_36 = 0;
pub type _bindgen_ty_36 = ::std::os::raw::c_uint;
pub const DAOS_GET_MAX: _bindgen_ty_37 = 1;
pub const DAOS_GET_MIN: _bindgen_ty_37 = 2;
pub const DAOS_GET_DKEY: _bindgen_ty_37 = 4;
pub const DAOS_GET_AKEY: _bindgen_ty_37 = 8;
pub const DAOS_GET_RECX: _bindgen_ty_37 = 16;
pub type _bindgen_ty_37 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_key_desc_t {
    pub kd_key_len: daos_size_t,
    pub kd_val_type: u32,
}
#[test]
fn bindgen_test_layout_daos_key_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<daos_key_desc_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_key_desc_t>(),
        16usize,
        concat!("Size of: ", stringify!(daos_key_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_key_desc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_key_desc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kd_key_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_key_desc_t),
            "::",
            stringify!(kd_key_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kd_val_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_key_desc_t),
            "::",
            stringify!(kd_val_type)
        )
    );
}
pub const DAOS_OCH_RDD_DEF: _bindgen_ty_38 = 1;
pub const DAOS_OCH_RDD_NO: _bindgen_ty_38 = 2;
pub const DAOS_OCH_RDD_RP: _bindgen_ty_38 = 4;
pub const DAOS_OCH_RDD_EC: _bindgen_ty_38 = 8;
pub const DAOS_OCH_SHD_DEF: _bindgen_ty_38 = 16;
pub const DAOS_OCH_SHD_TINY: _bindgen_ty_38 = 32;
pub const DAOS_OCH_SHD_REG: _bindgen_ty_38 = 64;
pub const DAOS_OCH_SHD_HI: _bindgen_ty_38 = 128;
pub const DAOS_OCH_SHD_EXT: _bindgen_ty_38 = 256;
pub const DAOS_OCH_SHD_MAX: _bindgen_ty_38 = 512;
pub type _bindgen_ty_38 = ::std::os::raw::c_uint;
extern "C" {
    pub fn daos_obj_generate_oid2(
        coh: daos_handle_t,
        oid: *mut daos_obj_id_t,
        type_: daos_otype_t,
        cid: daos_oclass_id_t,
        hints: daos_oclass_hints_t,
        args: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_obj_open(
        coh: daos_handle_t,
        oid: daos_obj_id_t,
        mode: ::std::os::raw::c_uint,
        oh: *mut daos_handle_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_obj_close(oh: daos_handle_t, ev: *mut daos_event_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_obj_punch(
        oh: daos_handle_t,
        th: daos_handle_t,
        flags: u64,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_obj_punch_dkeys(
        oh: daos_handle_t,
        th: daos_handle_t,
        flags: u64,
        nr: ::std::os::raw::c_uint,
        dkeys: *mut daos_key_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_obj_punch_akeys(
        oh: daos_handle_t,
        th: daos_handle_t,
        flags: u64,
        dkey: *mut daos_key_t,
        nr: ::std::os::raw::c_uint,
        akeys: *mut daos_key_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_obj_query(
        oh: daos_handle_t,
        oa: *mut daos_obj_attr,
        ranks: *mut d_rank_list_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_obj_fetch(
        oh: daos_handle_t,
        th: daos_handle_t,
        flags: u64,
        dkey: *mut daos_key_t,
        nr: ::std::os::raw::c_uint,
        iods: *mut daos_iod_t,
        sgls: *mut d_sg_list_t,
        ioms: *mut daos_iom_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_obj_update(
        oh: daos_handle_t,
        th: daos_handle_t,
        flags: u64,
        dkey: *mut daos_key_t,
        nr: ::std::os::raw::c_uint,
        iods: *mut daos_iod_t,
        sgls: *mut d_sg_list_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_obj_list_dkey(
        oh: daos_handle_t,
        th: daos_handle_t,
        nr: *mut u32,
        kds: *mut daos_key_desc_t,
        sgl: *mut d_sg_list_t,
        anchor: *mut daos_anchor_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_obj_list_akey(
        oh: daos_handle_t,
        th: daos_handle_t,
        dkey: *mut daos_key_t,
        nr: *mut u32,
        kds: *mut daos_key_desc_t,
        sgl: *mut d_sg_list_t,
        anchor: *mut daos_anchor_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_obj_list_recx(
        oh: daos_handle_t,
        th: daos_handle_t,
        dkey: *mut daos_key_t,
        akey: *mut daos_key_t,
        size: *mut daos_size_t,
        nr: *mut u32,
        recxs: *mut daos_recx_t,
        eprs: *mut daos_epoch_range_t,
        anchor: *mut daos_anchor_t,
        incr_order: bool,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_obj_query_key(
        oh: daos_handle_t,
        th: daos_handle_t,
        flags: u64,
        dkey: *mut daos_key_t,
        akey: *mut daos_key_t,
        recx: *mut daos_recx_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_obj_query_max_epoch(
        oh: daos_handle_t,
        th: daos_handle_t,
        epoch: *mut daos_epoch_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_obj_verify(
        coh: daos_handle_t,
        oid: daos_obj_id_t,
        epoch: daos_epoch_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_obj_anchor_split(
        oh: daos_handle_t,
        nr: *mut u32,
        anchors: *mut daos_anchor_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_obj_anchor_set(
        oh: daos_handle_t,
        index: u32,
        anchor: *mut daos_anchor_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_obj_key2anchor(
        oh: daos_handle_t,
        th: daos_handle_t,
        dkey: *mut daos_key_t,
        akey: *mut daos_key_t,
        anchor: *mut daos_anchor_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_oit_open(
        coh: daos_handle_t,
        epoch: daos_epoch_t,
        oh: *mut daos_handle_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_oit_close(oh: daos_handle_t, ev: *mut daos_event_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_oit_list(
        oh: daos_handle_t,
        oids: *mut daos_obj_id_t,
        oids_nr: *mut u32,
        anchor: *mut daos_anchor_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_oit_mark(
        oh: daos_handle_t,
        oid: daos_obj_id_t,
        marker: *mut d_iov_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_oit_list_unmarked(
        oh: daos_handle_t,
        oids: *mut daos_obj_id_t,
        oids_nr: *mut u32,
        anchor: *mut daos_anchor_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
pub type daos_oit_filter_cb = ::std::option::Option<
    unsafe extern "C" fn(oid: daos_obj_id_t, marker: *mut d_iov_t) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn daos_oit_list_filter(
        oh: daos_handle_t,
        oids: *mut daos_obj_id_t,
        oids_nr: *mut u32,
        anchor: *mut daos_anchor_t,
        filter: daos_oit_filter_cb,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_range_t {
    pub rg_idx: daos_off_t,
    pub rg_len: daos_size_t,
}
#[test]
fn bindgen_test_layout_daos_range_t() {
    const UNINIT: ::std::mem::MaybeUninit<daos_range_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_range_t>(),
        16usize,
        concat!("Size of: ", stringify!(daos_range_t))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_range_t>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_range_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rg_idx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_range_t),
            "::",
            stringify!(rg_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rg_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_range_t),
            "::",
            stringify!(rg_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_array_iod_t {
    pub arr_nr: daos_size_t,
    pub arr_rgs: *mut daos_range_t,
    pub arr_nr_short_read: daos_size_t,
    pub arr_nr_read: daos_size_t,
}
#[test]
fn bindgen_test_layout_daos_array_iod_t() {
    const UNINIT: ::std::mem::MaybeUninit<daos_array_iod_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_array_iod_t>(),
        32usize,
        concat!("Size of: ", stringify!(daos_array_iod_t))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_array_iod_t>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_array_iod_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arr_nr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_array_iod_t),
            "::",
            stringify!(arr_nr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arr_rgs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_array_iod_t),
            "::",
            stringify!(arr_rgs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arr_nr_short_read) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_array_iod_t),
            "::",
            stringify!(arr_nr_short_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arr_nr_read) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_array_iod_t),
            "::",
            stringify!(arr_nr_read)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_array_stbuf_t {
    pub st_size: daos_size_t,
    pub st_max_epoch: daos_epoch_t,
}
#[test]
fn bindgen_test_layout_daos_array_stbuf_t() {
    const UNINIT: ::std::mem::MaybeUninit<daos_array_stbuf_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_array_stbuf_t>(),
        16usize,
        concat!("Size of: ", stringify!(daos_array_stbuf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_array_stbuf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_array_stbuf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_array_stbuf_t),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_max_epoch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_array_stbuf_t),
            "::",
            stringify!(st_max_epoch)
        )
    );
}
extern "C" {
    pub fn daos_array_create(
        coh: daos_handle_t,
        oid: daos_obj_id_t,
        th: daos_handle_t,
        cell_size: daos_size_t,
        chunk_size: daos_size_t,
        oh: *mut daos_handle_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_array_open(
        coh: daos_handle_t,
        oid: daos_obj_id_t,
        th: daos_handle_t,
        mode: ::std::os::raw::c_uint,
        cell_size: *mut daos_size_t,
        chunk_size: *mut daos_size_t,
        oh: *mut daos_handle_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_array_open_with_attr(
        coh: daos_handle_t,
        oid: daos_obj_id_t,
        th: daos_handle_t,
        mode: ::std::os::raw::c_uint,
        cell_size: daos_size_t,
        chunk_size: daos_size_t,
        oh: *mut daos_handle_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_array_local2global(oh: daos_handle_t, glob: *mut d_iov_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_array_global2local(
        coh: daos_handle_t,
        glob: d_iov_t,
        mode: ::std::os::raw::c_uint,
        oh: *mut daos_handle_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_array_close(oh: daos_handle_t, ev: *mut daos_event_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_array_read(
        oh: daos_handle_t,
        th: daos_handle_t,
        iod: *mut daos_array_iod_t,
        sgl: *mut d_sg_list_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_array_write(
        oh: daos_handle_t,
        th: daos_handle_t,
        iod: *mut daos_array_iod_t,
        sgl: *mut d_sg_list_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_array_get_size(
        oh: daos_handle_t,
        th: daos_handle_t,
        size: *mut daos_size_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_array_stat(
        oh: daos_handle_t,
        th: daos_handle_t,
        stbuf: *mut daos_array_stbuf_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_array_set_size(
        oh: daos_handle_t,
        th: daos_handle_t,
        size: daos_size_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_array_destroy(
        oh: daos_handle_t,
        th: daos_handle_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_array_punch(
        oh: daos_handle_t,
        th: daos_handle_t,
        iod: *mut daos_array_iod_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_array_get_attr(
        oh: daos_handle_t,
        chunk_size: *mut daos_size_t,
        cell_size: *mut daos_size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_array_update_chunk_size(
        oh: daos_handle_t,
        chunk_size: daos_size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_kv_open(
        coh: daos_handle_t,
        oid: daos_obj_id_t,
        mode: ::std::os::raw::c_uint,
        oh: *mut daos_handle_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_kv_close(oh: daos_handle_t, ev: *mut daos_event_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_kv_destroy(
        oh: daos_handle_t,
        th: daos_handle_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_kv_put(
        oh: daos_handle_t,
        th: daos_handle_t,
        flags: u64,
        key: *const ::std::os::raw::c_char,
        size: daos_size_t,
        buf: *const ::std::os::raw::c_void,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_kv_get(
        oh: daos_handle_t,
        th: daos_handle_t,
        flags: u64,
        key: *const ::std::os::raw::c_char,
        size: *mut daos_size_t,
        buf: *mut ::std::os::raw::c_void,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_kv_remove(
        oh: daos_handle_t,
        th: daos_handle_t,
        flags: u64,
        key: *const ::std::os::raw::c_char,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_kv_list(
        oh: daos_handle_t,
        th: daos_handle_t,
        nr: *mut u32,
        kds: *mut daos_key_desc_t,
        sgl: *mut d_sg_list_t,
        anchor: *mut daos_anchor_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug)]
pub struct daos_acl {
    pub dal_ver: u16,
    pub dal_reserv: u16,
    pub dal_len: u32,
    pub dal_ace: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_daos_acl() {
    const UNINIT: ::std::mem::MaybeUninit<daos_acl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_acl>(),
        8usize,
        concat!("Size of: ", stringify!(daos_acl))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_acl>(),
        4usize,
        concat!("Alignment of ", stringify!(daos_acl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dal_ver) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_acl),
            "::",
            stringify!(dal_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dal_reserv) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_acl),
            "::",
            stringify!(dal_reserv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dal_len) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_acl),
            "::",
            stringify!(dal_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dal_ace) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_acl),
            "::",
            stringify!(dal_ace)
        )
    );
}
pub const daos_acl_principal_type_DAOS_ACL_OWNER: daos_acl_principal_type = 0;
pub const daos_acl_principal_type_DAOS_ACL_USER: daos_acl_principal_type = 1;
pub const daos_acl_principal_type_DAOS_ACL_OWNER_GROUP: daos_acl_principal_type = 2;
pub const daos_acl_principal_type_DAOS_ACL_GROUP: daos_acl_principal_type = 3;
pub const daos_acl_principal_type_DAOS_ACL_EVERYONE: daos_acl_principal_type = 4;
pub const daos_acl_principal_type_NUM_DAOS_ACL_TYPES: daos_acl_principal_type = 5;
pub type daos_acl_principal_type = ::std::os::raw::c_uint;
pub const daos_acl_access_type_DAOS_ACL_ACCESS_ALLOW: daos_acl_access_type = 1;
pub const daos_acl_access_type_DAOS_ACL_ACCESS_AUDIT: daos_acl_access_type = 2;
pub const daos_acl_access_type_DAOS_ACL_ACCESS_ALARM: daos_acl_access_type = 4;
pub type daos_acl_access_type = ::std::os::raw::c_uint;
pub const daos_acl_flags_DAOS_ACL_FLAG_GROUP: daos_acl_flags = 1;
pub const daos_acl_flags_DAOS_ACL_FLAG_POOL_INHERIT: daos_acl_flags = 2;
pub const daos_acl_flags_DAOS_ACL_FLAG_ACCESS_FAIL: daos_acl_flags = 4;
pub const daos_acl_flags_DAOS_ACL_FLAG_ACCESS_SUCCESS: daos_acl_flags = 8;
pub type daos_acl_flags = ::std::os::raw::c_uint;
pub const daos_acl_perm_DAOS_ACL_PERM_READ: daos_acl_perm = 1;
pub const daos_acl_perm_DAOS_ACL_PERM_WRITE: daos_acl_perm = 2;
pub const daos_acl_perm_DAOS_ACL_PERM_CREATE_CONT: daos_acl_perm = 4;
pub const daos_acl_perm_DAOS_ACL_PERM_DEL_CONT: daos_acl_perm = 8;
pub const daos_acl_perm_DAOS_ACL_PERM_GET_PROP: daos_acl_perm = 16;
pub const daos_acl_perm_DAOS_ACL_PERM_SET_PROP: daos_acl_perm = 32;
pub const daos_acl_perm_DAOS_ACL_PERM_GET_ACL: daos_acl_perm = 64;
pub const daos_acl_perm_DAOS_ACL_PERM_SET_ACL: daos_acl_perm = 128;
pub const daos_acl_perm_DAOS_ACL_PERM_SET_OWNER: daos_acl_perm = 256;
pub type daos_acl_perm = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct daos_ace {
    pub dae_access_types: u8,
    pub dae_principal_type: u8,
    pub dae_principal_len: u16,
    pub dae_access_flags: u16,
    pub dae_reserv: u16,
    pub dae_allow_perms: u64,
    pub dae_audit_perms: u64,
    pub dae_alarm_perms: u64,
    pub dae_principal: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_daos_ace() {
    const UNINIT: ::std::mem::MaybeUninit<daos_ace> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_ace>(),
        32usize,
        concat!("Size of: ", stringify!(daos_ace))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_ace>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_ace))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dae_access_types) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_ace),
            "::",
            stringify!(dae_access_types)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dae_principal_type) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_ace),
            "::",
            stringify!(dae_principal_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dae_principal_len) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_ace),
            "::",
            stringify!(dae_principal_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dae_access_flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_ace),
            "::",
            stringify!(dae_access_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dae_reserv) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_ace),
            "::",
            stringify!(dae_reserv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dae_allow_perms) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_ace),
            "::",
            stringify!(dae_allow_perms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dae_audit_perms) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_ace),
            "::",
            stringify!(dae_audit_perms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dae_alarm_perms) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_ace),
            "::",
            stringify!(dae_alarm_perms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dae_principal) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_ace),
            "::",
            stringify!(dae_principal)
        )
    );
}
extern "C" {
    pub fn daos_acl_create(aces: *mut *mut daos_ace, num_aces: u16) -> *mut daos_acl;
}
extern "C" {
    pub fn daos_acl_dup(acl: *mut daos_acl) -> *mut daos_acl;
}
extern "C" {
    pub fn daos_acl_free(acl: *mut daos_acl);
}
extern "C" {
    pub fn daos_acl_get_size(acl: *mut daos_acl) -> isize;
}
extern "C" {
    pub fn daos_acl_get_next_ace(acl: *mut daos_acl, current_ace: *mut daos_ace) -> *mut daos_ace;
}
extern "C" {
    pub fn daos_acl_get_ace_for_principal(
        acl: *mut daos_acl,
        type_: daos_acl_principal_type,
        principal: *const ::std::os::raw::c_char,
        ace: *mut *mut daos_ace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_acl_add_ace(
        acl: *mut *mut daos_acl,
        new_ace: *mut daos_ace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_acl_remove_ace(
        acl: *mut *mut daos_acl,
        type_: daos_acl_principal_type,
        principal_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_acl_dump(acl: *mut daos_acl);
}
extern "C" {
    pub fn daos_acl_validate(acl: *mut daos_acl) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_ace_create(
        type_: daos_acl_principal_type,
        principal_name: *const ::std::os::raw::c_char,
    ) -> *mut daos_ace;
}
extern "C" {
    pub fn daos_ace_free(ace: *mut daos_ace);
}
extern "C" {
    pub fn daos_ace_get_size(ace: *mut daos_ace) -> isize;
}
extern "C" {
    pub fn daos_ace_dump(ace: *mut daos_ace, tabs: u32);
}
extern "C" {
    pub fn daos_ace_is_valid(ace: *mut daos_ace) -> bool;
}
extern "C" {
    pub fn daos_acl_principal_is_valid(name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn daos_acl_uid_to_principal(
        uid: uid_t,
        name: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_acl_gid_to_principal(
        gid: gid_t,
        name: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_acl_principal_to_uid(
        principal: *const ::std::os::raw::c_char,
        uid: *mut uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_acl_principal_to_gid(
        principal: *const ::std::os::raw::c_char,
        gid: *mut gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_ace_get_principal_str(ace: *mut daos_ace) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn daos_ace_from_str(
        str_: *const ::std::os::raw::c_char,
        ace: *mut *mut daos_ace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_ace_to_str(
        ace: *mut daos_ace,
        buf: *mut ::std::os::raw::c_char,
        buf_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_ace_str_get_verbose(
        ace_str: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_acl_from_strs(
        ace_strs: *mut *const ::std::os::raw::c_char,
        ace_nr: usize,
        acl: *mut *mut daos_acl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_acl_to_strs(
        acl: *mut daos_acl,
        ace_strs: *mut *mut *mut ::std::os::raw::c_char,
        ace_nr: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_acl_principal_from_str(
        principal_str: *const ::std::os::raw::c_char,
        type_: *mut daos_acl_principal_type,
        name: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_acl_to_stream(
        stream: *mut FILE,
        acl: *mut daos_acl,
        verbose: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_rank_list_parse(
        str_: *const ::std::os::raw::c_char,
        sep: *const ::std::os::raw::c_char,
    ) -> *mut d_rank_list_t;
}
extern "C" {
    pub fn daos_cont_local2global(coh: daos_handle_t, glob: *mut d_iov_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_global2local(
        poh: daos_handle_t,
        glob: d_iov_t,
        coh: *mut daos_handle_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_create2(
        poh: daos_handle_t,
        uuid: *mut uuid_t,
        cont_prop: *mut daos_prop_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_create_with_label(
        poh: daos_handle_t,
        label: *const ::std::os::raw::c_char,
        cont_prop: *mut daos_prop_t,
        uuid: *mut uuid_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_open2(
        poh: daos_handle_t,
        cont: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
        coh: *mut daos_handle_t,
        info: *mut daos_cont_info_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_close(coh: daos_handle_t, ev: *mut daos_event_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_destroy2(
        poh: daos_handle_t,
        cont: *const ::std::os::raw::c_char,
        force: ::std::os::raw::c_int,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_query(
        coh: daos_handle_t,
        info: *mut daos_cont_info_t,
        cont_prop: *mut daos_prop_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_get_acl(
        coh: daos_handle_t,
        acl_prop: *mut *mut daos_prop_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_set_prop(
        coh: daos_handle_t,
        prop: *mut daos_prop_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_status_clear(
        coh: daos_handle_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_overwrite_acl(
        coh: daos_handle_t,
        acl: *mut daos_acl,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_update_acl(
        coh: daos_handle_t,
        acl: *mut daos_acl,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_delete_acl(
        coh: daos_handle_t,
        type_: daos_acl_principal_type,
        name: d_string_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_set_owner(
        coh: daos_handle_t,
        user: d_string_t,
        group: d_string_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_list_attr(
        coh: daos_handle_t,
        buffer: *mut ::std::os::raw::c_char,
        size: *mut usize,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_get_attr(
        coh: daos_handle_t,
        n: ::std::os::raw::c_int,
        names: *const *const ::std::os::raw::c_char,
        buffers: *const *mut ::std::os::raw::c_void,
        sizes: *mut usize,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_set_attr(
        coh: daos_handle_t,
        n: ::std::os::raw::c_int,
        names: *const *const ::std::os::raw::c_char,
        values: *const *const ::std::os::raw::c_void,
        sizes: *const usize,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_del_attr(
        coh: daos_handle_t,
        n: ::std::os::raw::c_int,
        names: *const *const ::std::os::raw::c_char,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_alloc_oids(
        coh: daos_handle_t,
        num_oids: daos_size_t,
        oid: *mut u64,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_aggregate(
        coh: daos_handle_t,
        epoch: daos_epoch_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_rollback(
        coh: daos_handle_t,
        epoch: daos_epoch_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_subscribe(
        coh: daos_handle_t,
        epoch: *mut daos_epoch_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_create_snap(
        coh: daos_handle_t,
        epoch: *mut daos_epoch_t,
        name: *mut ::std::os::raw::c_char,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
pub const daos_snapshot_opts_DAOS_SNAP_OPT_CR: daos_snapshot_opts = 1;
pub const daos_snapshot_opts_DAOS_SNAP_OPT_OIT: daos_snapshot_opts = 2;
pub type daos_snapshot_opts = ::std::os::raw::c_uint;
extern "C" {
    pub fn daos_cont_create_snap_opt(
        coh: daos_handle_t,
        epoch: *mut daos_epoch_t,
        name: *mut ::std::os::raw::c_char,
        opts: daos_snapshot_opts,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_list_snap(
        coh: daos_handle_t,
        nr: *mut ::std::os::raw::c_int,
        epochs: *mut daos_epoch_t,
        names: *mut *mut ::std::os::raw::c_char,
        anchor: *mut daos_anchor_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_destroy_snap(
        coh: daos_handle_t,
        epr: daos_epoch_range_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_get_perms(
        cont_prop: *mut daos_prop_t,
        uid: uid_t,
        gids: *mut gid_t,
        nr_gids: usize,
        perms: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_snap_oit_create(
        coh: daos_handle_t,
        epoch: daos_epoch_t,
        name: *mut ::std::os::raw::c_char,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_cont_snap_oit_destroy(
        coh: daos_handle_t,
        oh: daos_handle_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
pub const daos_target_type_t_DAOS_TP_UNKNOWN: daos_target_type_t = 0;
pub const daos_target_type_t_DAOS_TP_HDD: daos_target_type_t = 1;
pub const daos_target_type_t_DAOS_TP_SSD: daos_target_type_t = 2;
pub const daos_target_type_t_DAOS_TP_PM: daos_target_type_t = 3;
pub const daos_target_type_t_DAOS_TP_VM: daos_target_type_t = 4;
pub type daos_target_type_t = ::std::os::raw::c_uint;
pub const daos_target_state_t_DAOS_TS_UNKNOWN: daos_target_state_t = 0;
pub const daos_target_state_t_DAOS_TS_DOWN_OUT: daos_target_state_t = 1;
pub const daos_target_state_t_DAOS_TS_DOWN: daos_target_state_t = 2;
pub const daos_target_state_t_DAOS_TS_UP: daos_target_state_t = 3;
pub const daos_target_state_t_DAOS_TS_UP_IN: daos_target_state_t = 4;
pub const daos_target_state_t_DAOS_TS_NEW: daos_target_state_t = 5;
pub const daos_target_state_t_DAOS_TS_DRAIN: daos_target_state_t = 6;
pub type daos_target_state_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_target_perf_t {
    pub foo: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_daos_target_perf_t() {
    const UNINIT: ::std::mem::MaybeUninit<daos_target_perf_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_target_perf_t>(),
        4usize,
        concat!("Size of: ", stringify!(daos_target_perf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_target_perf_t>(),
        4usize,
        concat!("Alignment of ", stringify!(daos_target_perf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).foo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_target_perf_t),
            "::",
            stringify!(foo)
        )
    );
}
pub const daos_media_type_t_DAOS_MEDIA_SCM: daos_media_type_t = 0;
pub const daos_media_type_t_DAOS_MEDIA_NVME: daos_media_type_t = 1;
pub const daos_media_type_t_DAOS_MEDIA_MAX: daos_media_type_t = 2;
pub type daos_media_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_space {
    pub s_total: [u64; 2usize],
    pub s_free: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_daos_space() {
    const UNINIT: ::std::mem::MaybeUninit<daos_space> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_space>(),
        32usize,
        concat!("Size of: ", stringify!(daos_space))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_space>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_space))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_total) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_space),
            "::",
            stringify!(s_total)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_free) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_space),
            "::",
            stringify!(s_free)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_target_info_t {
    pub ta_type: daos_target_type_t,
    pub ta_state: daos_target_state_t,
    pub ta_perf: daos_target_perf_t,
    pub ta_space: daos_space,
}
#[test]
fn bindgen_test_layout_daos_target_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<daos_target_info_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_target_info_t>(),
        48usize,
        concat!("Size of: ", stringify!(daos_target_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_target_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_target_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ta_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_target_info_t),
            "::",
            stringify!(ta_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ta_state) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_target_info_t),
            "::",
            stringify!(ta_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ta_perf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_target_info_t),
            "::",
            stringify!(ta_perf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ta_space) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_target_info_t),
            "::",
            stringify!(ta_space)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_pool_space {
    pub ps_space: daos_space,
    pub ps_free_min: [u64; 2usize],
    pub ps_free_max: [u64; 2usize],
    pub ps_free_mean: [u64; 2usize],
    pub ps_ntargets: u32,
    pub ps_padding: u32,
}
#[test]
fn bindgen_test_layout_daos_pool_space() {
    const UNINIT: ::std::mem::MaybeUninit<daos_pool_space> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_pool_space>(),
        88usize,
        concat!("Size of: ", stringify!(daos_pool_space))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_pool_space>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_pool_space))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_space) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_space),
            "::",
            stringify!(ps_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_free_min) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_space),
            "::",
            stringify!(ps_free_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_free_max) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_space),
            "::",
            stringify!(ps_free_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_free_mean) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_space),
            "::",
            stringify!(ps_free_mean)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_ntargets) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_space),
            "::",
            stringify!(ps_ntargets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_padding) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_space),
            "::",
            stringify!(ps_padding)
        )
    );
}
pub const daos_rebuild_state_t_DRS_IN_PROGRESS: daos_rebuild_state_t = 0;
pub const daos_rebuild_state_t_DRS_NOT_STARTED: daos_rebuild_state_t = 1;
pub const daos_rebuild_state_t_DRS_COMPLETED: daos_rebuild_state_t = 2;
pub type daos_rebuild_state_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct daos_rebuild_status {
    pub rs_version: u32,
    pub rs_seconds: u32,
    pub rs_errno: i32,
    pub __bindgen_anon_1: daos_rebuild_status__bindgen_ty_1,
    pub rs_padding32: i32,
    pub rs_fail_rank: i32,
    pub rs_toberb_obj_nr: u64,
    pub rs_obj_nr: u64,
    pub rs_rec_nr: u64,
    pub rs_size: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union daos_rebuild_status__bindgen_ty_1 {
    pub rs_state: i32,
    pub rs_done: i32,
}
#[test]
fn bindgen_test_layout_daos_rebuild_status__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<daos_rebuild_status__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_rebuild_status__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(daos_rebuild_status__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_rebuild_status__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(daos_rebuild_status__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rs_state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_rebuild_status__bindgen_ty_1),
            "::",
            stringify!(rs_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rs_done) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_rebuild_status__bindgen_ty_1),
            "::",
            stringify!(rs_done)
        )
    );
}
#[test]
fn bindgen_test_layout_daos_rebuild_status() {
    const UNINIT: ::std::mem::MaybeUninit<daos_rebuild_status> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_rebuild_status>(),
        56usize,
        concat!("Size of: ", stringify!(daos_rebuild_status))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_rebuild_status>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_rebuild_status))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rs_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_rebuild_status),
            "::",
            stringify!(rs_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rs_seconds) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_rebuild_status),
            "::",
            stringify!(rs_seconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rs_errno) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_rebuild_status),
            "::",
            stringify!(rs_errno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rs_padding32) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_rebuild_status),
            "::",
            stringify!(rs_padding32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rs_fail_rank) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_rebuild_status),
            "::",
            stringify!(rs_fail_rank)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rs_toberb_obj_nr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_rebuild_status),
            "::",
            stringify!(rs_toberb_obj_nr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rs_obj_nr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_rebuild_status),
            "::",
            stringify!(rs_obj_nr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rs_rec_nr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_rebuild_status),
            "::",
            stringify!(rs_rec_nr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rs_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_rebuild_status),
            "::",
            stringify!(rs_size)
        )
    );
}
pub const daos_pool_info_bit_DPI_SPACE: daos_pool_info_bit = 1;
pub const daos_pool_info_bit_DPI_REBUILD_STATUS: daos_pool_info_bit = 2;
pub const daos_pool_info_bit_DPI_ENGINES_ENABLED: daos_pool_info_bit = 4;
pub const daos_pool_info_bit_DPI_ALL: daos_pool_info_bit = -1;
pub type daos_pool_info_bit = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct daos_pool_info_t {
    pub pi_uuid: uuid_t,
    pub pi_ntargets: u32,
    pub pi_nnodes: u32,
    pub pi_ndisabled: u32,
    pub pi_map_ver: u32,
    pub pi_leader: u32,
    pub pi_bits: u64,
    pub pi_space: daos_pool_space,
    pub pi_rebuild_st: daos_rebuild_status,
}
#[test]
fn bindgen_test_layout_daos_pool_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<daos_pool_info_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_pool_info_t>(),
        192usize,
        concat!("Size of: ", stringify!(daos_pool_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_pool_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_pool_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pi_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_info_t),
            "::",
            stringify!(pi_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pi_ntargets) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_info_t),
            "::",
            stringify!(pi_ntargets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pi_nnodes) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_info_t),
            "::",
            stringify!(pi_nnodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pi_ndisabled) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_info_t),
            "::",
            stringify!(pi_ndisabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pi_map_ver) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_info_t),
            "::",
            stringify!(pi_map_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pi_leader) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_info_t),
            "::",
            stringify!(pi_leader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pi_bits) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_info_t),
            "::",
            stringify!(pi_bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pi_space) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_info_t),
            "::",
            stringify!(pi_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pi_rebuild_st) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_info_t),
            "::",
            stringify!(pi_rebuild_st)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_pool_cont_info {
    pub pci_uuid: uuid_t,
    pub pci_label: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_daos_pool_cont_info() {
    const UNINIT: ::std::mem::MaybeUninit<daos_pool_cont_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_pool_cont_info>(),
        144usize,
        concat!("Size of: ", stringify!(daos_pool_cont_info))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_pool_cont_info>(),
        1usize,
        concat!("Alignment of ", stringify!(daos_pool_cont_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pci_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_cont_info),
            "::",
            stringify!(pci_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pci_label) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_cont_info),
            "::",
            stringify!(pci_label)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_pool_cont_info2 {
    pub pci_id: daos_pool_cont_info,
    pub pci_cinfo: daos_cont_info_t,
    pub pci_reserved: [*mut ::std::os::raw::c_void; 2usize],
}
#[test]
fn bindgen_test_layout_daos_pool_cont_info2() {
    const UNINIT: ::std::mem::MaybeUninit<daos_pool_cont_info2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_pool_cont_info2>(),
        208usize,
        concat!("Size of: ", stringify!(daos_pool_cont_info2))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_pool_cont_info2>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_pool_cont_info2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pci_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_cont_info2),
            "::",
            stringify!(pci_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pci_cinfo) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_cont_info2),
            "::",
            stringify!(pci_cinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pci_reserved) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_cont_info2),
            "::",
            stringify!(pci_reserved)
        )
    );
}
extern "C" {
    pub fn daos_pool_connect2(
        pool: *const ::std::os::raw::c_char,
        sys: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
        poh: *mut daos_handle_t,
        info: *mut daos_pool_info_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_pool_disconnect(poh: daos_handle_t, ev: *mut daos_event_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_pool_local2global(poh: daos_handle_t, glob: *mut d_iov_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_pool_global2local(glob: d_iov_t, poh: *mut daos_handle_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_pool_query(
        poh: daos_handle_t,
        ranks: *mut *mut d_rank_list_t,
        info: *mut daos_pool_info_t,
        pool_prop: *mut daos_prop_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_pool_query_target(
        poh: daos_handle_t,
        tgt: u32,
        rank: d_rank_t,
        info: *mut daos_target_info_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_pool_list_attr(
        poh: daos_handle_t,
        buffer: *mut ::std::os::raw::c_char,
        size: *mut usize,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_pool_get_attr(
        poh: daos_handle_t,
        n: ::std::os::raw::c_int,
        names: *const *const ::std::os::raw::c_char,
        buffers: *const *mut ::std::os::raw::c_void,
        sizes: *mut usize,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_pool_set_attr(
        poh: daos_handle_t,
        n: ::std::os::raw::c_int,
        names: *const *const ::std::os::raw::c_char,
        values: *const *const ::std::os::raw::c_void,
        sizes: *const usize,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_pool_del_attr(
        poh: daos_handle_t,
        n: ::std::os::raw::c_int,
        names: *const *const ::std::os::raw::c_char,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_pool_list_cont(
        poh: daos_handle_t,
        ncont: *mut daos_size_t,
        cbuf: *mut daos_pool_cont_info,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
pub const daos_pool_cont_filter_func_PCF_FUNC_EQ: daos_pool_cont_filter_func = 0;
pub const daos_pool_cont_filter_func_PCF_FUNC_NE: daos_pool_cont_filter_func = 1;
pub const daos_pool_cont_filter_func_PCF_FUNC_LT: daos_pool_cont_filter_func = 2;
pub const daos_pool_cont_filter_func_PCF_FUNC_LE: daos_pool_cont_filter_func = 3;
pub const daos_pool_cont_filter_func_PCF_FUNC_GT: daos_pool_cont_filter_func = 4;
pub const daos_pool_cont_filter_func_PCF_FUNC_GE: daos_pool_cont_filter_func = 5;
pub const daos_pool_cont_filter_func_PCF_FUNC_MAX: daos_pool_cont_filter_func = 6;
pub type daos_pool_cont_filter_func = ::std::os::raw::c_uint;
pub const daos_pool_cont_filter_key_PCF_KEY_MD_OTIME: daos_pool_cont_filter_key = 0;
pub const daos_pool_cont_filter_key_PCF_KEY_MD_MTIME: daos_pool_cont_filter_key = 1;
pub const daos_pool_cont_filter_key_PCF_KEY_NUM_SNAPSHOTS: daos_pool_cont_filter_key = 2;
pub const daos_pool_cont_filter_key_PCF_KEY_NUM_HANDLES: daos_pool_cont_filter_key = 3;
pub const daos_pool_cont_filter_key_PCF_KEY_MAX: daos_pool_cont_filter_key = 4;
pub type daos_pool_cont_filter_key = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct daos_pool_cont_filter_part {
    pub pcfp_func: u32,
    pub pcfp_key: u32,
    pub __bindgen_anon_1: daos_pool_cont_filter_part__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union daos_pool_cont_filter_part__bindgen_ty_1 {
    pub pcfp_val64: u64,
    pub pcfp_valstr: d_string_t,
}
#[test]
fn bindgen_test_layout_daos_pool_cont_filter_part__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<daos_pool_cont_filter_part__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_pool_cont_filter_part__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(daos_pool_cont_filter_part__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<daos_pool_cont_filter_part__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(daos_pool_cont_filter_part__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pcfp_val64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_cont_filter_part__bindgen_ty_1),
            "::",
            stringify!(pcfp_val64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pcfp_valstr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_cont_filter_part__bindgen_ty_1),
            "::",
            stringify!(pcfp_valstr)
        )
    );
}
#[test]
fn bindgen_test_layout_daos_pool_cont_filter_part() {
    const UNINIT: ::std::mem::MaybeUninit<daos_pool_cont_filter_part> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_pool_cont_filter_part>(),
        16usize,
        concat!("Size of: ", stringify!(daos_pool_cont_filter_part))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_pool_cont_filter_part>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_pool_cont_filter_part))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pcfp_func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_cont_filter_part),
            "::",
            stringify!(pcfp_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pcfp_key) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_cont_filter_part),
            "::",
            stringify!(pcfp_key)
        )
    );
}
pub type daos_pool_cont_filter_part_t = daos_pool_cont_filter_part;
pub const daos_pool_cont_filter_combine_PCF_COMBINE_LOGICAL_AND: daos_pool_cont_filter_combine = 0;
pub const daos_pool_cont_filter_combine_PCF_COMBINE_LOGICAL_OR: daos_pool_cont_filter_combine = 1;
pub type daos_pool_cont_filter_combine = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_pool_cont_filter {
    pub pcf_combine_func: u32,
    pub pcf_nparts: u32,
    pub pcf_parts: *mut *mut daos_pool_cont_filter_part,
}
#[test]
fn bindgen_test_layout_daos_pool_cont_filter() {
    const UNINIT: ::std::mem::MaybeUninit<daos_pool_cont_filter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_pool_cont_filter>(),
        16usize,
        concat!("Size of: ", stringify!(daos_pool_cont_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_pool_cont_filter>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_pool_cont_filter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pcf_combine_func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_cont_filter),
            "::",
            stringify!(pcf_combine_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pcf_nparts) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_cont_filter),
            "::",
            stringify!(pcf_nparts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pcf_parts) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_pool_cont_filter),
            "::",
            stringify!(pcf_parts)
        )
    );
}
pub type daos_pool_cont_filter_t = daos_pool_cont_filter;
extern "C" {
    pub fn daos_pool_cont_filter_init(
        filt: *mut daos_pool_cont_filter_t,
        combine_func: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_pool_cont_filter_add(
        filt: *mut daos_pool_cont_filter_t,
        part: *mut daos_pool_cont_filter_part_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_pool_cont_filter_fini(filt: *mut daos_pool_cont_filter_t);
}
extern "C" {
    pub fn daos_pool_filter_cont(
        poh: daos_handle_t,
        filter: *mut daos_pool_cont_filter_t,
        ncont: *mut daos_size_t,
        cbuf: *mut daos_pool_cont_info2,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_pool_get_perms(
        pool_prop: *mut daos_prop_t,
        uid: uid_t,
        gids: *mut gid_t,
        nr_gids: usize,
        perms: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_mgmt_get_sys_info(
        sys: *const ::std::os::raw::c_char,
        info: *mut *mut daos_sys_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_mgmt_put_sys_info(info: *mut daos_sys_info);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct daos_mgmt_pool_info_t {
    pub mgpi_uuid: uuid_t,
    pub mgpi_svc: *mut d_rank_list_t,
    pub mgpi_ldr: d_rank_t,
}
#[test]
fn bindgen_test_layout_daos_mgmt_pool_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<daos_mgmt_pool_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<daos_mgmt_pool_info_t>(),
        32usize,
        concat!("Size of: ", stringify!(daos_mgmt_pool_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<daos_mgmt_pool_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(daos_mgmt_pool_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mgpi_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_mgmt_pool_info_t),
            "::",
            stringify!(mgpi_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mgpi_svc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_mgmt_pool_info_t),
            "::",
            stringify!(mgpi_svc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mgpi_ldr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(daos_mgmt_pool_info_t),
            "::",
            stringify!(mgpi_ldr)
        )
    );
}
extern "C" {
    pub fn daos_pool_stop_svc(poh: daos_handle_t, ev: *mut daos_event_t) -> ::std::os::raw::c_int;
}
pub const DMG_KEY_FAIL_LOC: _bindgen_ty_39 = 0;
pub const DMG_KEY_FAIL_VALUE: _bindgen_ty_39 = 1;
pub const DMG_KEY_FAIL_NUM: _bindgen_ty_39 = 2;
pub const DMG_KEY_NUM: _bindgen_ty_39 = 3;
pub type _bindgen_ty_39 = ::std::os::raw::c_uint;
extern "C" {
    pub fn daos_debug_set_params(
        grp: *const ::std::os::raw::c_char,
        rank: d_rank_t,
        key_id: ::std::os::raw::c_uint,
        value: u64,
        value_extra: u64,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_debug_add_mark(mark: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_mgmt_get_bs_state(
        group: *const ::std::os::raw::c_char,
        blobstore_uuid: *mut ::std::os::raw::c_uchar,
        blobstore_state: *mut ::std::os::raw::c_int,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
pub const DAOS_TF_RDONLY: _bindgen_ty_40 = 1;
pub const DAOS_TF_ZERO_COPY: _bindgen_ty_40 = 2;
pub type _bindgen_ty_40 = ::std::os::raw::c_uint;
extern "C" {
    pub fn daos_tx_open(
        coh: daos_handle_t,
        th: *mut daos_handle_t,
        flags: u64,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_tx_commit(th: daos_handle_t, ev: *mut daos_event_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_tx_open_snap(
        coh: daos_handle_t,
        epoch: daos_epoch_t,
        th: *mut daos_handle_t,
        ev: *mut daos_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_tx_abort(th: daos_handle_t, ev: *mut daos_event_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_tx_close(th: daos_handle_t, ev: *mut daos_event_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_tx_restart(th: daos_handle_t, ev: *mut daos_event_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_tx_hdl2epoch(th: daos_handle_t, epoch: *mut daos_epoch_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_hlc2timespec(hlc: u64, ts: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daos_hlc2timestamp(hlc: u64, ts: *mut time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Initialize the DAOS library.\n Should be invoked prior to any DAOS calls. Can be called multiple times."]
    pub fn daos_init() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Finalize the DAOS library.\n Should be invoked only when daos_init() was previously successfully executed.\n An internal reference count is maintained by the library that will tear down\n the DAOS stack on the last call to daos_fini()"]
    pub fn daos_fini() -> ::std::os::raw::c_int;
}
